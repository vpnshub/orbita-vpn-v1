from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel, Field
from typing import List, Dict, Optional
import sys
from loguru import logger
from datetime import datetime, timedelta
import aiosqlite
from aiogram import Bot

from pathlib import Path
root_path = Path(__file__).parent.parent.parent
sys.path.insert(0, str(root_path))

from handlers.database import Database
from handlers.x_ui import xui_manager

router = APIRouter(
    prefix="/promo-tariffs",
    tags=["promo-tariffs"],
    responses={404: {"description": "–ü—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω"}},
)

async def get_db():
    return Database()

class PromoTariffCreate(BaseModel):
    name: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞")
    description: str = Field(None, description="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞")
    left_day: int = Field(..., gt=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏")
    server_id: Optional[int] = Field(None, description="ID —Å–µ—Ä–≤–µ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")

class PromoTariffSend(BaseModel):
    promo_id: int = Field(..., description="ID –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞")
    telegram_id: int = Field(..., description="Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@router.get("/", response_model=List[Dict])
async def get_promo_tariffs(db: Database = Depends(get_db)):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–æ–≤
    """
    try:
        tariffs = await db.get_all_promo_tariffs()
        return tariffs
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/", response_model=Dict)
async def create_promo_tariff(
    promo: PromoTariffCreate,
    db: Database = Depends(get_db)
):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞
    
    - **name**: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞
    - **description**: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - **left_day**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
    - **server_id**: ID —Å–µ—Ä–≤–µ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    try:
        success = await db.add_promo_tariff(
            name=promo.name,
            description=promo.description,
            left_day=promo.left_day,
            server_id=promo.server_id
        )
        
        if not success:
            raise HTTPException(status_code=400, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ")
        
        return {
            "message": "–ü—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
            "success": True,
            "name": promo.name,
            "left_day": promo.left_day,
            "server_id": promo.server_id
        }
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.delete("/{promo_id}", response_model=Dict)
async def disable_promo_tariff(
    promo_id: int,
    db: Database = Depends(get_db)
):
    """
    –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞
    
    - **promo_id**: ID –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    """
    try:
        success = await db.disable_promo_tariff(promo_id)
        if not success:
            raise HTTPException(status_code=404, detail="–ü—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        
        return {
            "message": "–ü—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
            "success": True,
            "promo_id": promo_id
        }
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞ {promo_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/send", response_model=Dict)
async def send_promo_tariff(
    promo: PromoTariffSend,
    db: Database = Depends(get_db)
):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –¢–æ–ª—å–∫–æ –∑–∞–ø–∏—Å—å –≤ –ë–î –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
    –î–ª—è –ø–æ–ª–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /send-with-server
    
    - **promo_id**: ID –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞
    - **telegram_id**: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        success = await db.send_promo_tariff(
            promo_id=promo.promo_id,
            user_id=promo.telegram_id
        )
        
        if not success:
            raise HTTPException(
                status_code=400,
                detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π –∏–ª–∏ —Ç–∞—Ä–∏—Ñ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            )
        
        return {
            "message": "–ü—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å—å –≤ –ë–î)",
            "success": True,
            "promo_id": promo.promo_id,
            "telegram_id": promo.telegram_id
        }
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞ {promo.promo_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {promo.telegram_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/send-with-server", response_model=Dict)
async def send_promo_tariff_with_server(
    promo: PromoTariffSend,
    db: Database = Depends(get_db)
):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ XUI
    
    - **promo_id**: ID –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞
    - **telegram_id**: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        async def get_promo_tariff(promo_id: int):
            async with aiosqlite.connect(db.db_path) as conn:
                conn.row_factory = aiosqlite.Row
                cursor = await conn.execute("""
                    SELECT *
                    FROM tariff_promo
                    WHERE id = ? AND is_enable = 1
                """, (promo_id,))
                tariff = await cursor.fetchone()
                return dict(tariff) if tariff else None
        
        async def get_user(telegram_id: int):
            async with aiosqlite.connect(db.db_path) as conn:
                conn.row_factory = aiosqlite.Row
                cursor = await conn.execute("""
                    SELECT *
                    FROM user
                    WHERE telegram_id = ? AND is_enable = 1
                """, (telegram_id,))
                user = await cursor.fetchone()
                return dict(user) if user else None
        
        async def get_server(server_id: int):
            async with aiosqlite.connect(db.db_path) as conn:
                conn.row_factory = aiosqlite.Row
                cursor = await conn.execute("""
                    SELECT *
                    FROM server_settings
                    WHERE id = ?
                """, (server_id,))
                server = await cursor.fetchone()
                return dict(server) if server else None
        
        async def get_bot_token():
            async with aiosqlite.connect(db.db_path) as conn:
                cursor = await conn.execute("SELECT bot_token FROM bot_settings WHERE is_enable = 1")
                result = await cursor.fetchone()
                if not result:
                    raise HTTPException(status_code=500, detail="–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return result[0]
        
        tariff = await get_promo_tariff(promo.promo_id)
        if not tariff:
            raise HTTPException(status_code=404, detail="–ü—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
        
        user = await get_user(promo.telegram_id)
        if not user:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
        
        server = await get_server(tariff['server_id'])
        if not server:
            raise HTTPException(status_code=404, detail="–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        end_date = datetime.now() + timedelta(days=tariff['left_day'])
        vless_link = await xui_manager.create_trial_user(server, tariff, user['telegram_id'])
        
        if not vless_link:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
        
        async with aiosqlite.connect(db.db_path) as conn:
            await conn.execute("""
                INSERT INTO user_subscription 
                (user_id, tariff_id, server_id, end_date, vless, is_active)
                VALUES (?, ?, ?, ?, ?, 1)
            """, (user['telegram_id'], tariff['id'], tariff['server_id'], 
                  end_date.strftime('%Y-%m-%d %H:%M:%S'), vless_link))
            await conn.commit()
        
        try:
            bot_token = await get_bot_token()
            bot = Bot(token=bot_token)
            
            user_message = (
                f"üéÅ –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ!\n\n"
                f"–¢–∞—Ä–∏—Ñ: {tariff['name']}\n"
                f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {tariff['left_day']} –¥–Ω–µ–π\n"
                f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                f"–í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n<code>{vless_link}</code>"
            )
            
            await bot.send_message(
                chat_id=user['telegram_id'],
                text=user_message,
                parse_mode="HTML"
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['telegram_id']} –æ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–µ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        
        return {
            "message": "–ü—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
            "success": True,
            "promo_id": promo.promo_id,
            "telegram_id": promo.telegram_id,
            "username": user.get('username'),
            "end_date": end_date.strftime('%Y-%m-%d %H:%M:%S'),
            "vless_link": vless_link
        }
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞ {promo.promo_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {promo.telegram_id} —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {e}")
        raise HTTPException(status_code=500, detail=str(e)) 