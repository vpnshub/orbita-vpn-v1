from aiogram import Router, F, types
from aiogram.types import CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from asyncio import Lock
from handlers.database import db
from loguru import logger
import aiosqlite
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from handlers.promocode import promo_manager
from handlers.yookassa import yookassa_manager
from handlers.buy_subscribe import subscription_manager
from handlers.user.user_kb import get_trial_vless_keyboard, get_success_by_keyboard, get_start_keyboard
import os
from aiogram.types import FSInputFile

router = Router()

class PromoCodeStates(StatesGroup):
    waiting_for_promo = State()

payment_locks = {}

@router.callback_query(F.data == "start_tariffs")
async def show_tariffs(callback: CallbackQuery):
    try:
        await callback.message.delete()
        
        tariffs = await db.get_active_tariffs()
        if not tariffs:
            await callback.message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤.")
            return

        tariffs_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:\n\n"
        seen = []
        for tariff in tariffs:
            key = tariff["server_name"]
            if key not in seen:
                seen.append(key)
                tariffs_text += f"{tariff['server_name']}: {tariff['description']}\n"

        keyboard = InlineKeyboardBuilder()
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute("""
                SELECT DISTINCT s.id, s.name 
                FROM server_settings s
                JOIN tariff t ON s.id = t.server_id
                WHERE t.is_enable = 1
            """) as cursor:
                servers = await cursor.fetchall()

        for server in servers:
            keyboard.add(
                InlineKeyboardButton(
                    text=f"{server['name']}",
                    callback_data=f"user_select_server:{server['id']}"
                )
            )
        keyboard.add(
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="tariff_back_to_start")
        )
        keyboard.adjust(1)

        message_data = await db.get_bot_message('tariff_message')
        
        if message_data and message_data['image_path'] and os.path.exists(message_data['image_path']):
            full_text = message_data['text'] + "\n\n" + tariffs_text
            await callback.message.answer_photo(
                photo=FSInputFile(message_data['image_path']),
                caption=full_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="HTML"
            )
        else:
            await callback.message.answer(
                text=tariffs_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="HTML"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–æ–≤: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞—Ä–∏—Ñ–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    finally:
        await callback.answer()

@router.callback_query(F.data.startswith("select_tariff:"))
async def process_tariff_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞"""
    try:
        await callback.message.delete()
        
        tariff_id = int(callback.data.split(":")[1])
        
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute("""
                SELECT t.*, s.name as server_name 
                FROM tariff t 
                INNER JOIN server_settings s ON t.server_id = s.id 
                WHERE t.id = ? AND t.is_enable = 1
            """, (tariff_id,)) as cursor:
                tariff = await cursor.fetchone()
                
        if not tariff:
            await callback.message.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
            
        message_text = (
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:\n"
            f"<blockquote>"
            f"<b>–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:</b> {tariff['name']}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {tariff['description']}\n"
            f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {tariff['price']} —Ä—É–±.\n"
            f"<b>–°—Ç—Ä–∞–Ω–∞:</b> {tariff['server_name']}\n"
            f"<b>–°—Ä–æ–∫–æ–º –Ω–∞:</b> {tariff['left_day']} –¥–Ω–µ–π.\n"
            f"üí° –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥, —á—Ç–æ–±—ã —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –¥–µ–Ω—å–≥–∏.\n"
            f"</blockquote>\n"
        )
        
        keyboard = InlineKeyboardBuilder()
        is_yookassa_active = await db.is_yookassa_enabled()
        
        is_crypto_active = await db.is_crypto_enabled()
        
        
        if is_yookassa_active:
            keyboard.button(text="üîµ –Æ–ö–∞—Å—Å–∞", callback_data=f"create_invoice:{tariff_id}")
        if is_crypto_active:
            keyboard.button(text="ü™ô CryptoBot", callback_data=f"apply_crypto_payments:{tariff_id}")
        keyboard.button(text="üí≤ –û–ø–ª–∞—Ç–∏—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞", callback_data=f"apply_balance:{tariff_id}")
        keyboard.button(text="üé´ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data=f"apply_promo_code:{tariff_id}")
        keyboard.button(text="üíµ –û–ø–ª–∞—Ç–∏—Ç—å –∫–æ–¥–æ–º-–æ–ø–ª–∞—Ç—ã", callback_data=f"apply_payments_code:{tariff_id}")
        keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="tariff_back_to_start")
        keyboard.adjust(2, 1)  
        
        await callback.message.answer(
            text=message_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∞—Ä–∏—Ñ–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await callback.answer()

@router.callback_query(F.data.startswith("create_invoice:"))
async def process_create_invoice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞"""
    try:
        data = callback.data.split(":")
        tariff_id = int(data[1])
        promo_code = data[2] if len(data) > 2 else None
        
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute("""
                SELECT t.*, s.name as server_name 
                FROM tariff t 
                INNER JOIN server_settings s ON t.server_id = s.id 
                WHERE t.id = ? AND t.is_enable = 1
            """, (tariff_id,)) as cursor:
                tariff = await cursor.fetchone()

        if not tariff:
            await callback.answer("–¢–∞—Ä–∏—Ñ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return

        price = float(tariff['price'])
        if promo_code:
            async with aiosqlite.connect(db.db_path) as conn:
                async with conn.execute("""
                    SELECT percentage 
                    FROM promocodes 
                    WHERE promocod = ? AND is_enable = 1 
                    AND activation_total < activation_limit
                """, (promo_code,)) as cursor:
                    promo = await cursor.fetchone()
                    if promo:
                        percentage = promo[0]
                        discount = price * (percentage / 100)
                        price = price - discount

        payment_id, payment_url = await yookassa_manager.create_payment(
            amount=price,
            description=f"–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff['name']}",
            user_id=str(callback.from_user.id),
            tariff_name=tariff['name']
        )

        if not payment_id or not payment_url:
            await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        await state.update_data(payment_id=payment_id, tariff_id=tariff_id)

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üí∞ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)
        keyboard.button(text="üïµÔ∏è‚Äç‚ôÇÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data=f"check_payment:{payment_id}")
        keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="tariff_back_to_start")
        keyboard.adjust(1)

        await callback.message.delete()
        await callback.message.answer(
            "üí° *–í–∞—à —Å—á–µ—Ç –≥–æ—Ç–æ–≤!*\n\n"
            "üëá *–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç.* –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–¥–µ–∂–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã, —á—Ç–æ–±—ã –≤–∞—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ—à–ª–∞ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫ –∏ –±—ã–ª–∞ –∑–∞—â–∏—â–µ–Ω–∞.\n\n"
            "üí∞ –ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üïµÔ∏è‚Äç‚ôÇÔ∏è *–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂*, —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É –≤ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–∏–Ω—É—Ç—ã! –ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å ü§ù",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )


    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("check_payment:"))
async def check_payment(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        payment_id = callback.data.split(":")[1]
        
        if payment_id not in payment_locks:
            payment_locks[payment_id] = Lock()
        
        if not payment_locks[payment_id].locked():
            async with payment_locks[payment_id]:
                async with aiosqlite.connect(db.db_path) as conn:
                    async with conn.execute(
                        'SELECT id FROM user_subscription WHERE payment_id = ?',
                        (payment_id,)
                    ) as cursor:
                        if await cursor.fetchone():
                            await callback.answer("–ü–ª–∞—Ç–µ–∂ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!", show_alert=True)
                            return

                is_paid = await yookassa_manager.check_payment(payment_id, bot=callback.bot)
                
                if not is_paid:
                    await callback.answer("–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.")
                    return

                data = await state.get_data()
                tariff_id = data.get('tariff_id')
                
                if 'promo_code' in data:
                    success, message_text, _ = await promo_manager.apply_promo_code(
                        data['promo_code'], 
                        data['original_price']
                    )
                    if not success:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: {message_text}")

                subscription = await subscription_manager.create_subscription(
                    user_id=callback.from_user.id,
                    tariff_id=tariff_id,
                    payment_id=payment_id,  
                    bot=callback.bot
                )

                if not subscription:
                    await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                    return

                async with aiosqlite.connect(db.db_path) as conn:
                    async with conn.execute(
                        'SELECT price FROM tariff WHERE id = ?',
                        (tariff_id,)
                    ) as cursor:
                        tariff = await cursor.fetchone()
                        if tariff:
                            await conn.execute("""
                                INSERT INTO payments (user_id, tariff_id, price)
                                VALUES (?, ?, ?)
                            """, (
                                callback.from_user.id,
                                tariff_id,
                                tariff[0]
                            ))
                            await conn.commit()

                message_text = (
                    "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                    f"<blockquote>"
                    f"<b>–¢–∞—Ä–∏—Ñ:</b> {subscription['tariff']['name']}\n"
                    f"<b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {subscription['end_date'].strftime('%d.%m.%Y')}\n"
                    f"</blockquote>"
                    "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Å—ã–ª–∫—É:\n\n"
                    "<blockquote>"
                    f"<code>{subscription['vless']}</code>\n"
                    "</blockquote>\n"
                    "‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É, –æ–Ω–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n"
                    "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –í—ã –Ω–∞–π–¥–µ—Ç–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ."
                )

                await callback.message.delete()
                await callback.message.answer(
                    text=message_text,
                    reply_markup=get_success_by_keyboard(),
                    parse_mode="HTML"
                )

                await state.clear()
        else:
            await callback.answer("–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", show_alert=True)
            return

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞",
            show_alert=True
        )
    finally:
        if payment_id in payment_locks and not payment_locks[payment_id].locked():
            del payment_locks[payment_id]

@router.callback_query(F.data == "tariff_back_to_start")
async def process_back_to_start(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
    try:
        from handlers.commands import start_command
        await callback.message.delete()
        await start_command(callback.message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

@router.callback_query(F.data.startswith("apply_promo_code:"))
async def process_promo_code_button(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    try:
        tariff_id = int(callback.data.split(":")[1])
        await state.update_data(tariff_id=tariff_id)
        
        await callback.message.delete()
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–û—Ç–º–µ–Ω–∞", callback_data=f"select_tariff:{tariff_id}")
        
        await callback.message.answer(
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ —è –ø–µ—Ä–µ—Å—á–∏—Ç–∞—é —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏:",
            reply_markup=keyboard.as_markup()
        )
        
        await state.set_state(PromoCodeStates.waiting_for_promo)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(PromoCodeStates.waiting_for_promo)
async def process_promo_code(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    try:
        is_valid, message_text, percentage = await promo_manager.check_promo_code(message.text)
        
        if not is_valid:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="start_tariffs")
            await message.answer(
                message_text,
                reply_markup=keyboard.as_markup()
            )
            await state.clear()
            return

        data = await state.get_data()
        
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute("""
                SELECT t.*, s.name as server_name 
                FROM tariff t
                JOIN server_settings s ON t.server_id = s.id
                WHERE t.id = ?
            """, (data['tariff_id'],)) as cursor:
                tariff = await cursor.fetchone()
                if tariff:
                    tariff = dict(tariff)

        if not tariff:
            await message.answer("–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return

        discount = tariff['price'] * (percentage / 100)
        new_price = tariff['price'] - discount

        await state.update_data(
            promo_code=message.text,
            original_price=tariff['price'],
            discount_price=new_price
        )

        payment_id, payment_url = await yookassa_manager.create_payment(
            amount=float(new_price),
            description=f"–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff['name']} —Å–æ —Å–∫–∏–¥–∫–æ–π {percentage}%",
            user_id=str(message.from_user.id),
            tariff_name=tariff['name']
        )

        if not payment_id or not payment_url:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        message_text = (
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
            f"<blockquote>"
            f"<b>–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:</b> {tariff['name']}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {tariff['description']}\n"
            f"<b>–°—Ç—Ä–∞–Ω–∞:</b> {tariff['server_name']}\n"
            f"<b>–°—Ä–æ–∫–æ–º –Ω–∞:</b> {tariff['left_day']} –¥–Ω–µ–π.\n"
            f"<b>–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {tariff['price']} —Ä—É–±.\n"
            f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π:</b> {new_price:.2f} —Ä—É–±.\n"
            f"</blockquote>\n"
            f"–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω! –°–∫–∏–¥–∫–∞: {percentage}%"
        )

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üí∞ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)
        keyboard.button(text="üïµÔ∏è‚Äç‚ôÇÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data=f"check_payment:{payment_id}")
        keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="tariff_back_to_start")
        keyboard.adjust(1)

        await message.answer(
            text=message_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.callback_query(F.data.startswith("buy_tariff:"))
async def buy_tariff(callback: CallbackQuery, state: FSMContext):
    try:
        tariff_id = int(callback.data.split(":")[1])
        
        tariff = await db.get_tariff(tariff_id)
        if not tariff:
            await callback.answer("–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        payment_id, payment_url = await yookassa_manager.create_payment(
            amount=float(tariff['price']),
            description=f"–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff['name']}",
            user_id=str(callback.from_user.id),
            tariff_name=tariff['name']
        )

        if not payment_id or not payment_url:
            await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        await state.update_data(payment_id=payment_id, tariff_id=tariff_id)

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üí∞ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)
        keyboard.button(text="üïµÔ∏è‚Äç‚ôÇÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data=f"check_payment:{payment_id}")
        keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="tariff_back_to_start")
        keyboard.adjust(1)

        await callback.message.delete()
        await callback.message.answer(
            "üí° *–í–∞—à —Å—á–µ—Ç –≥–æ—Ç–æ–≤!*\n\n"
            "üëá *–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç.* –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–¥–µ–∂–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã, —á—Ç–æ–±—ã –≤–∞—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ—à–ª–∞ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫ –∏ –±—ã–ª–∞ –∑–∞—â–∏—â–µ–Ω–∞.\n\n"
            "üí∞ –ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üïµÔ∏è‚Äç‚ôÇÔ∏è *–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂*, —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É –≤ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–∏–Ω—É—Ç—ã! –ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å ü§ù",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "show_tariffs")
async def show_tariffs(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏"""
    try:
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute("""
                SELECT DISTINCT s.id, s.name 
                FROM server_settings s
                JOIN tariff t ON s.id = t.server_id
                WHERE t.is_enable = 1
            """) as cursor:
                servers = await cursor.fetchall()

        if not servers:
            await callback.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤")
            return

        keyboard = InlineKeyboardBuilder()
        for server in servers:
            keyboard.add(
                InlineKeyboardButton(
                    text=f"{server['name']}",
                    callback_data=f"user_select_server:{server['id']}"
                )
            )

        keyboard.add(
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="tariff_back_to_start")
        )
        keyboard.adjust(1)

        tariff_message = await db.get_bot_message("tariff")
        text = tariff_message['text'] if tariff_message else "üöÄ –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π, –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≥–∏–±–∫–∏–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã –¥–ª—è –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ —Å–µ—Ä–≤–µ—Ä–∞"

        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard.as_markup()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
        show_trial = True
        try:
            user = await db.get_user(callback.from_user.id)
            if user.get('trial_period'):
                show_trial = False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å show_trial: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤",
            reply_markup= await get_start_keyboard(show_trial=show_trial)
        )

@router.callback_query(F.data.startswith("user_select_server:"))
async def show_server_tariffs(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        server_id = int(callback.data.split(":")[1])
        
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute("""
                SELECT t.*, s.name as server_name
                FROM tariff t
                JOIN server_settings s ON t.server_id = s.id
                WHERE t.server_id = ? AND t.is_enable = 1
                ORDER BY t.price
            """, (server_id,)) as cursor:
                tariffs = await cursor.fetchall()

        if not tariffs:
            await callback.answer("–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤")
            return

        server_name = tariffs[0]['server_name']
        text = f"üåç –°–µ—Ä–≤–µ—Ä: {server_name}\n"

        """
        text = f"üåç –°–µ—Ä–≤–µ—Ä: {server_name}\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã:\n\n"
        
        for tariff in tariffs:
            text += (
                f"<blockquote>"
                f"<b>–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:</b> {tariff['name']}\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {tariff['description']}\n"
                f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {tariff['price']} —Ä—É–±.\n"
                f"<b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> {tariff['left_day']} –¥–Ω–µ–π\n"
                f"</blockquote>\n"
            )"""
        
        text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:"

        keyboard = InlineKeyboardBuilder()
        for tariff in tariffs:
            keyboard.add(
                InlineKeyboardButton(
                text=f"{tariff['name']} - {tariff['price']}‚ÇΩ",
                callback_data=f"select_tariff:{tariff['id']}"
                )
            )

        keyboard.add(InlineKeyboardButton(text="üîô –ö —Å–µ—Ä–≤–µ—Ä–∞–º", callback_data="show_tariffs"))
        keyboard.add(InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="tariff_back_to_start"))
        keyboard.adjust(1)

        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        show_trial = True
        try:
            user = await db.get_user(callback.from_user.id)
            if user.get('trial_period'):
                show_trial = False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å show_trial: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞—Ä–∏—Ñ–æ–≤",
            reply_markup= await get_start_keyboard(show_trial)
        )
