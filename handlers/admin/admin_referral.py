from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger
from handlers.database import db
from handlers.admin.admin_kb import get_admin_referral_keyboard, get_admin_keyboard
from handlers.admin.admin_states import ReferralStates
import aiosqlite

router = Router()

@router.callback_query(F.data == "admin_show_referral")
async def show_referral_menu(event):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π"""
    try:
        conditions = await db.get_referral_conditions()
        
        message_text = "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π\n\n"
        message_text += "–¢–µ–∫—É—â–∏–µ —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n"
        
        if conditions:
            for condition in conditions:
                status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" if condition['is_enable'] else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ"
                message_text += (
                    f"\n<b>{condition['name']}</b> [{status}]\n"
                    f"<blockquote>"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {condition['description']}\n"
                    f"–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: {condition['invitations']}\n"
                    f"–ù–∞–≥—Ä–∞–¥–∞: {condition['reward_sum']} —Ä—É–±.\n"
                    f"</blockquote>"
                )
        else:
            message_text += "\n‚ùå –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"
        
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            cursor = await conn.execute("""
                SELECT 
                    COUNT(DISTINCT user_id) as total_users,
                    SUM(reward_sum) as total_rewards
                FROM referral_rewards_history
            """)
            stats = await cursor.fetchone()
            
            message_text += (
                f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n"
                f"<blockquote>"
                f"–ü–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—ã: {stats['total_users'] or 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                f"–í—ã–ø–ª–∞—á–µ–Ω–æ –Ω–∞–≥—Ä–∞–¥: {stats['total_rewards'] or 0:.2f} —Ä—É–±.\n"
                f"</blockquote>"
            )
        
        if isinstance(event, CallbackQuery):
            await event.message.edit_text(
                message_text,
                reply_markup=get_admin_referral_keyboard(),
                parse_mode="HTML"
            )
        else:  
            await event.answer(
                message_text,
                reply_markup=get_admin_referral_keyboard(),
                parse_mode="HTML"
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã: {e}")
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"
        
        if isinstance(event, CallbackQuery):
            await event.message.edit_text(error_text, reply_markup=get_admin_keyboard())
        else:
            await event.answer(error_text, reply_markup=get_admin_keyboard())

@router.callback_query(F.data == "admin_add_referral_condition")
async def start_add_condition(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Å–ª–æ–≤–∏—è"""
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:",
        reply_markup=None
    )
    await state.set_state(ReferralStates.ADD_NAME)

@router.message(StateFilter(ReferralStates.ADD_NAME))
async def add_condition_name(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"""
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏—è:")
    await state.set_state(ReferralStates.ADD_DESCRIPTION)

@router.message(StateFilter(ReferralStates.ADD_DESCRIPTION))
async def add_condition_description(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"""
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π (—á–∏—Å–ª–æ):")
    await state.set_state(ReferralStates.ADD_INVITATIONS)

@router.message(StateFilter(ReferralStates.ADD_INVITATIONS))
async def add_condition_invitations(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å—É–º–º—É –Ω–∞–≥—Ä–∞–¥—ã"""
    try:
        invitations = int(message.text)
        if invitations <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        
        await state.update_data(invitations=invitations)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞–≥—Ä–∞–¥—ã (—á–∏—Å–ª–æ):")
        await state.set_state(ReferralStates.ADD_REWARD)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

@router.message(StateFilter(ReferralStates.ADD_REWARD))
async def add_condition_reward(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—É–º–º—É –Ω–∞–≥—Ä–∞–¥—ã –∏ —Å–æ–∑–¥–∞—Ç—å —É—Å–ª–æ–≤–∏–µ"""
    try:
        reward = float(message.text)
        if reward <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        
        data = await state.get_data()
        
        async with aiosqlite.connect(db.db_path) as conn:
            await conn.execute("""
                INSERT INTO referral_condition (name, description, invitations, reward_sum)
                VALUES (?, ?, ?, ?)
            """, (data['name'], data['description'], data['invitations'], reward))
            await conn.commit()
        
        await state.clear()
        await message.answer(
            "‚úÖ –ù–æ–≤–æ–µ —É—Å–ª–æ–≤–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
            reply_markup=get_admin_referral_keyboard()
        )
        
        await show_referral_menu(message)
        
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")

@router.callback_query(F.data == "admin_edit_referral_condition")
async def start_edit_condition(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª–æ–≤–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    conditions = await db.get_referral_conditions()
    
    if not conditions:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            reply_markup=get_admin_referral_keyboard()
        )
        return
    
    keyboard = InlineKeyboardBuilder()
    for condition in conditions:
        keyboard.button(
            text=f"{condition['name']} ({condition['invitations']} –ø—Ä–∏–≥., {condition['reward_sum']} —Ä—É–±.)",
            callback_data=f"edit_condition_{condition['id']}"
        )
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_show_referral")
    keyboard.adjust(1)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=keyboard.as_markup()
    )

@router.callback_query(F.data.startswith("edit_condition_"))
async def select_edit_field(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    condition_id = int(callback.data.split('_')[2])
    await state.update_data(condition_id=condition_id)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_field_name")
    keyboard.button(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_field_description")
    keyboard.button(text="–ö–æ–ª-–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π", callback_data="edit_field_invitations")
    keyboard.button(text="–°—É–º–º–∞ –Ω–∞–≥—Ä–∞–¥—ã", callback_data="edit_field_reward")
    #keyboard.button(text="–°—Ç–∞—Ç—É—Å", callback_data="edit_field_status")
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_edit_referral_condition")
    keyboard.adjust(1)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=keyboard.as_markup()
    )

@router.callback_query(F.data.startswith("edit_field_"))
async def edit_field_value(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è"""
    field = callback.data.split('_')[2]
    await state.update_data(edit_field=field)
    
    if field == "status":
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –í–∫–ª—é—á–∏—Ç—å", callback_data="set_status_1")
        keyboard.button(text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data="set_status_0")
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_edit_referral_condition")
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
            reply_markup=keyboard.as_markup()
        )
    else:
        field_names = {
            "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
            "description": "–æ–ø–∏—Å–∞–Ω–∏–µ",
            "invitations": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π",
            "reward": "—Å—É–º–º—É –Ω–∞–≥—Ä–∞–¥—ã"
        }
        await callback.message.edit_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_names[field]}:",
            reply_markup=None
        )
        await state.set_state(ReferralStates.EDIT_VALUE)

@router.callback_query(F.data == "admin_delete_referral_condition")
async def start_delete_condition(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª–æ–≤–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    conditions = await db.get_referral_conditions()
    
    if not conditions:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
            reply_markup=get_admin_referral_keyboard()
        )
        return
    
    keyboard = InlineKeyboardBuilder()
    for condition in conditions:
        keyboard.button(
            text=f"‚ùå {condition['name']}", 
            callback_data=f"delete_condition_{condition['id']}"
        )
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_show_referral")
    keyboard.adjust(1)
    
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
        "<i>–í–Ω–∏–º–∞–Ω–∏–µ: —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</i>",
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("delete_condition_"))
async def confirm_delete_condition(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ"""
    condition_id = int(callback.data.split('_')[2])
    
    async with aiosqlite.connect(db.db_path) as conn:
        await conn.execute(
            "DELETE FROM referral_condition WHERE id = ?",
            (condition_id,)
        )
        await conn.commit()
    
    await callback.message.edit_text(
        "‚úÖ –£—Å–ª–æ–≤–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!",
        reply_markup=get_admin_referral_keyboard()
    )
    
    await show_referral_menu(callback)

@router.message(StateFilter(ReferralStates.EDIT_VALUE))
async def process_edit_value(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è"""
    try:
        data = await state.get_data()
        condition_id = data['condition_id']
        field = data['edit_field']
        value = message.text

        if field == "invitations":
            value = int(value)
            if value <= 0:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
            db_field = "invitations"
        elif field == "reward":
            value = float(value)
            if value <= 0:
                raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
            db_field = "reward_sum"
        elif field == "name":
            if not value.strip():
                raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            db_field = "name"
        elif field == "description":
            db_field = "description"
        else:
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ")

        async with aiosqlite.connect(db.db_path) as conn:
            await conn.execute(f"""
                UPDATE referral_condition 
                SET {db_field} = ?
                WHERE id = ?
            """, (value, condition_id))
            await conn.commit()

        await state.clear()
        await message.answer(
            "‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=get_admin_referral_keyboard()
        )
        
        await show_referral_menu(message)

    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è",
            reply_markup=get_admin_referral_keyboard()
        )

@router.callback_query(F.data.startswith("set_status_"))
async def update_condition_status(callback: CallbackQuery, state: FSMContext):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—Å–ª–æ–≤–∏—è"""
    try:
        data = await state.get_data()
        condition_id = data['condition_id']
        new_status = int(callback.data.split('_')[2])  # 0 –∏–ª–∏ 1

        async with aiosqlite.connect(db.db_path) as conn:
            await conn.execute("""
                UPDATE referral_condition 
                SET is_enable = ?
                WHERE id = ?
            """, (new_status, condition_id))
            await conn.commit()

        await state.clear()
        await callback.message.edit_text(
            "‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
            reply_markup=get_admin_referral_keyboard()
        )
        
        await show_referral_menu(callback)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞",
            reply_markup=get_admin_referral_keyboard()
        )

