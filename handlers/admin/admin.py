from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from loguru import logger
import aiosqlite

from handlers.database import db
from handlers.admin.admin_kb import get_admin_keyboard, get_servers_keyboard
from handlers.admin.check_server import check_all_servers
from handlers.commands import start_command

router = Router()

@router.message(Command("admin"))
async def admin_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    try:
        if not await db.is_admin(message.from_user.id):
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}")
            return
        
        admin_message = await db.get_bot_message("admin")
        if not admin_message:
            text = "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        else:
            text = admin_message['text']
        
        await message.answer(
            text=text,
            reply_markup=get_admin_keyboard()
        )
        logger.info(f"–û—Ç–∫—Ä—ã—Ç–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã admin: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

async def format_server_list(servers: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    result = "<b>–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤:</b>\n"
    
    for server in servers:
        result += "<blockquote>"
        result += f"<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {server['name']}\n"
        result += f"<b>IP:</b> {server['ip'] if server['ip'] else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        result += f"<b>–°—Ç–∞—Ç—É—Å:</b> {'–î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' if server['is_enable'] else '–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n"
        if server.get('available'):
            result += f"<b>–ó–∞–¥–µ—Ä–∂–∫–∞:</b> {server['delay']}ms\n"
            result += f"<b>–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞:</b> {'–û–ö' if server.get('status_code') == 404 else server.get('status_code', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        else:
            result += "<b>–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞)</b>\n"
        result += "</blockquote>\n"
    
    return result   

@router.callback_query(F.data == "admin_show_servers")
async def process_servers_button(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°–µ—Ä–≤–µ—Ä–∞"""
    try:
        if not await db.is_admin(callback.from_user.id):
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–æ–∫ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {callback.from_user.id}")
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
            return
        
        servers = await db.get_all_servers()
        
        if not servers:
            await callback.message.edit_text(
                "–°–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=get_servers_keyboard()
            )
            return
        
        servers_with_status = await check_all_servers(servers)
        
        message_text = await format_server_list(servers_with_status)
        await callback.message.edit_text(
            message_text,
            reply_markup=get_servers_keyboard(),
            parse_mode="HTML"
        )
        
        logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –°–µ—Ä–≤–µ—Ä–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤")

@router.callback_query(F.data == "servers_back_to_admin")
async def process_back_to_admin(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –≤ —Å–ø–∏—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    try:
        if not await db.is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
            return
            
        admin_message = await db.get_bot_message("admin")
        text = admin_message['text'] if admin_message else "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
        await callback.message.edit_text(
            text=text,
            reply_markup=get_admin_keyboard()
        )
        logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")

@router.callback_query(F.data == "admin_back_to_start")
async def process_back_to_start(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await callback.message.delete()
        await start_command(callback.message)
        logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {callback.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")


@router.callback_query(F.data == "admin_show_payments")
async def process_show_payments(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
    try:
        await callback.message.delete()

        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            
            async with conn.execute(
                'SELECT SUM(price) as total FROM payments'
            ) as cursor:
                total = await cursor.fetchone()
                total_amount = total['total'] if total['total'] else 0

            async with conn.execute("""
                SELECT u.username, u.telegram_id, COUNT(*) as purchase_count
                FROM payments p
                JOIN user u ON p.user_id = u.telegram_id
                GROUP BY p.user_id
                ORDER BY purchase_count DESC
                LIMIT 1
            """) as cursor:
                top_buyer = await cursor.fetchone()
                if top_buyer:
                    buyer_info = f"@{top_buyer['username']}" if top_buyer['username'] else f"ID: {top_buyer['telegram_id']}"
                    purchase_count = top_buyer['purchase_count']
                    buyer_text = f"{buyer_info}"
                else:
                    buyer_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

            async with conn.execute("""
                SELECT p.price, p.date as payment_date, u.username, u.telegram_id
                FROM payments p
                JOIN user u ON p.user_id = u.telegram_id
                ORDER BY p.date DESC
                LIMIT 1
            """) as cursor:
                last_payment = await cursor.fetchone()

            async with conn.execute("""
                SELECT t.name, COUNT(*) as count
                FROM user_subscription us
                JOIN tariff t ON us.tariff_id = t.id
                GROUP BY us.tariff_id
                ORDER BY count DESC
                LIMIT 1
            """) as cursor:
                popular_tariff = await cursor.fetchone()

            async with conn.execute("""
                SELECT COUNT(*) as total_subscriptions
                FROM user_subscription
            """) as cursor:
                total_subs = await cursor.fetchone()
                total_subscriptions = total_subs['total_subscriptions'] if total_subs else 0

            async with conn.execute("""
                SELECT COUNT(*) as total_users
                FROM user
            """) as cursor:
                total_users = await cursor.fetchone()
                total_users = total_users['total_users'] if total_users else 0

        if last_payment:
            message_text = (
                f"<blockquote>"
                f"üí∞ <b>–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_amount:.2f} —Ä—É–±.</b>\n"
                f"üë§ <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}</b>\n\n"
                f"üëë –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å: <b>{buyer_text}</b>\n"
                f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç—É–ø–∏–≤—à–∏–π –ø–ª–∞—Ç–µ–∂: <b>{last_payment['price']:.2f} —Ä—É–±.</b>\n"
                f"üìÖ –î–∞—Ç–∞: <b>{last_payment['payment_date']}</b>\n\n"
                f"üíµ –í—Å–µ–≥–æ –∫–æ–¥–æ–≤ –Ω–∞ —Å—É–º–º—É: <b>{await db.get_active_codes_sum():.2f} ‚ÇΩ</b>\n"
                f"üìà –û–ø–ª–∞—á–µ–Ω–æ –∫–æ–¥–∞–º–∏: <b>{await db.get_used_codes_sum():.2f} ‚ÇΩ</b>\n\n"
                f"üéÅ –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ: <b>{popular_tariff['name'] if popular_tariff else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</b>\n"
                f"üõí –í—Å–µ–≥–æ –∫—É–ø–ª–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: <b>{total_subscriptions}</b>\n"
                f"</blockquote>"
            )
        else:
            message_text = (
                "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π*\n\n"
                "–ü–ª–∞—Ç–µ–∂–µ–π –ø–æ–∫–∞ –Ω–µ—Ç"
            )

        await callback.message.answer(
            text=message_text,
            parse_mode="HTML",
            reply_markup=get_admin_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π",
            reply_markup=get_admin_keyboard()
        )

@router.callback_query(F.data == "servers_update")
async def update_servers_list(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    try:
        servers = await db.get_all_servers()
        
        if not servers:
            await callback.answer("–°–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        servers = await check_all_servers(servers)
        
        message_text = await format_server_list(servers)
        
        await callback.message.edit_text(
            text=message_text,
            reply_markup=get_servers_keyboard(),
            parse_mode="HTML"
        )
        
        await callback.answer("–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        logger.info(f"–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {callback.from_user.id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
        await callback.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤",
            show_alert=True
        )