from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from loguru import logger
import aiosqlite

from handlers.database import db
from handlers.admin.admin_kb import get_admin_keyboard
from handlers.admin.admin_tariff import get_admin_show_tariff_keyboard

router = Router()

class TariffAddStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_price = State()
    waiting_for_days = State()

def get_servers_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_tariff")
    return keyboard.as_markup()

@router.callback_query(F.data == "add_tariff")
async def start_add_tariff(callback: CallbackQuery):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞"""
    try:
        await callback.message.delete()
        
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute("""
                SELECT id, name FROM server_settings 
                WHERE is_enable = 1
                ORDER BY name
            """) as cursor:
                servers = await cursor.fetchall()

        if not servers:
            await callback.message.answer(
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞",
                reply_markup=get_admin_show_tariff_keyboard()
            )
            return

        keyboard = InlineKeyboardBuilder()
        for server in servers:
            keyboard.button(
                text=server['name'],
                callback_data=f"select_server:{server['id']}"
            )
        keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_tariff")
        keyboard.adjust(1)

        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞:",
            reply_markup=keyboard.as_markup()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_admin_show_tariff_keyboard()
        )

@router.callback_query(F.data.startswith("select_server:"))
async def process_server_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        server_id = int(callback.data.split(':')[1])
        
        await state.update_data(server_id=server_id)
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_tariff")
        
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞:",
            reply_markup=keyboard.as_markup()
        )
        await state.set_state(TariffAddStates.waiting_for_name)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_admin_show_tariff_keyboard()
        )

@router.message(TariffAddStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞"""
    await state.update_data(name=message.text.strip())
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_tariff")
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
        reply_markup=keyboard.as_markup()
    )
    await state.set_state(TariffAddStates.waiting_for_description)

@router.message(TariffAddStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    await state.update_data(description=message.text.strip())
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_tariff")
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:",
        reply_markup=keyboard.as_markup()
    )
    await state.set_state(TariffAddStates.waiting_for_price)

@router.message(TariffAddStates.waiting_for_price)
async def process_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã"""
    try:
        price = float(message.text.strip())
        await state.update_data(price=price)
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_tariff")
        
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ —Ç–∞—Ä–∏—Ñ–Ω–æ–º –ø–ª–∞–Ω–µ:",
            reply_markup=keyboard.as_markup()
        )
        await state.set_state(TariffAddStates.waiting_for_days)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã:")

@router.message(TariffAddStates.waiting_for_days)
async def process_days(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞"""
    try:
        days = int(message.text.strip())
        data = await state.get_data()
        
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute(
                "SELECT name FROM server_settings WHERE id = ?",
                (data['server_id'],)
            ) as cursor:
                server = await cursor.fetchone()

            await conn.execute("""
                INSERT INTO tariff 
                (name, description, price, left_day, server_id, is_enable)
                VALUES (?, ?, ?, ?, ?, 1)
            """, (data['name'], data['description'], data['price'], days, data['server_id']))
            await conn.commit()

        await message.answer(
            f"–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω: {data['name']}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å—é: {data['price']} —Ä—É–±. –∏ —Å—Ä–æ–∫–æ–º –Ω–∞ {days} –¥–Ω–µ–π\n"
            f"—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {server['name']}",
            reply_markup=get_admin_show_tariff_keyboard()
        )
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_admin_show_tariff_keyboard()
        )
    finally:
        await state.clear()

@router.callback_query(F.data == "cancel_add_tariff")
async def cancel_add_tariff(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞"""
    await state.clear()
    await callback.message.edit_text(
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_admin_show_tariff_keyboard()
    ) 