from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger
import aiosqlite
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from handlers.database import db
from handlers.admin.admin_kb import get_admin_keyboard, get_yokassa_keyboard

router = Router()

class YookassaAddStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_shop_id = State()
    waiting_for_api_key = State()
    waiting_for_delete_shop_id = State()

@router.callback_query(F.data == "admin_show_yokassa")
async def show_yokassa_settings(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ YooKassa"""
    try:
        await callback.message.delete()
        
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute("""
                SELECT * FROM yookassa_settings 
                WHERE is_enable = 1 
                LIMIT 1
            """) as cursor:
                settings = await cursor.fetchone()

        if not settings:
            await callback.message.answer(
                "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ YooKassa –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=get_yokassa_keyboard()
            )
            return

        message_text = (
            "<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ YooKassa</b>\n\n"
            f"<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {settings['name']}\n"
            f"<b>SHOP ID:</b> <code>{settings['shop_id']}</code>\n"
            f"<b>API:</b> <code>{settings['api_key']}</code>\n"
        )

        await callback.message.answer(
            text=message_text,
            reply_markup=get_yokassa_keyboard(),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ YooKassa: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ YooKassa",
            reply_markup=get_admin_keyboard()
        )

@router.callback_query(F.data == "yokassa_back_to_admin")
async def process_back_to_admin(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    try:
        await callback.message.delete()
        admin_message = await db.get_bot_message("admin")
        text = admin_message['text'] if admin_message else "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
        await callback.message.answer(
            text=text,
            reply_markup=get_admin_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            reply_markup=get_admin_keyboard()
        )

@router.callback_query(F.data == "add_yokassa")
async def start_add_yokassa(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ YooKassa"""
    try:
        await callback.message.delete()
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_yokassa")
        
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ YooKassa:",
            reply_markup=keyboard.as_markup()
        )
        
        await state.set_state(YookassaAddStates.waiting_for_name)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ YooKassa: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_yokassa_keyboard()
        )

@router.message(YookassaAddStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è"""
    await state.update_data(name=message.text.strip())
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_yokassa")
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ SHOP ID:",
        reply_markup=keyboard.as_markup()
    )
    await state.set_state(YookassaAddStates.waiting_for_shop_id)

@router.message(YookassaAddStates.waiting_for_shop_id)
async def process_shop_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ SHOP ID"""
    await state.update_data(shop_id=message.text.strip())
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_yokassa")
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ API KEY:",
        reply_markup=keyboard.as_markup()
    )
    await state.set_state(YookassaAddStates.waiting_for_api_key)

@router.message(YookassaAddStates.waiting_for_api_key)
async def process_api_key(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ API KEY –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        data = await state.get_data()
        api_key = message.text.strip()
        
        async with aiosqlite.connect(db.db_path) as conn:
            await conn.execute(
                "UPDATE yookassa_settings SET is_enable = 0 WHERE is_enable = 1"
            )
            
            await conn.execute("""
                INSERT INTO yookassa_settings 
                (name, shop_id, api_key, is_enable)
                VALUES (?, ?, ?, 1)
            """, (data['name'], data['shop_id'], api_key))
            await conn.commit()
        
        await message.answer(
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {data['name']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.",
            reply_markup=get_yokassa_keyboard()
        )
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ YooKassa: {data['name']}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ YooKassa: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_yokassa_keyboard()
        )
    finally:
        await state.clear()

@router.callback_query(F.data == "cancel_add_yokassa")
async def cancel_add_yokassa(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await state.clear()
    await callback.message.edit_text(
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_yokassa_keyboard()
    )

@router.callback_query(F.data == "delete_yokassa")
async def start_delete_yokassa(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ YooKassa"""
    try:
        await callback.message.delete()
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete_yokassa")
        
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ SHOP ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
            reply_markup=keyboard.as_markup()
        )
        
        await state.set_state(YookassaAddStates.waiting_for_delete_shop_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ YooKassa: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_yokassa_keyboard()
        )

@router.message(YookassaAddStates.waiting_for_delete_shop_id)
async def process_delete_shop_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ SHOP ID –∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        shop_id = message.text.strip()
        
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            
            async with conn.execute(
                "SELECT name FROM yookassa_settings WHERE shop_id = ? AND is_enable = 1",
                (shop_id,)
            ) as cursor:
                settings = await cursor.fetchone()
                
            if not settings:
                await message.answer(
                    "‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —Ç–∞–∫–∏–º SHOP ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                    reply_markup=get_yokassa_keyboard()
                )
                await state.clear()
                return
                
            await conn.execute(
                "UPDATE yookassa_settings SET is_enable = 0 WHERE shop_id = ?",
                (shop_id,)
            )
            await conn.commit()
            
        await message.answer(
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ YooKassa –¥–ª—è {settings['name']} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.",
            reply_markup=get_yokassa_keyboard()
        )
        logger.info(f"–£–¥–∞–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ YooKassa –¥–ª—è {settings['name']} (SHOP ID: {shop_id})")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ YooKassa: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_yokassa_keyboard()
        )
    finally:
        await state.clear()

@router.callback_query(F.data == "cancel_delete_yokassa")
async def cancel_delete_yokassa(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await state.clear()
    await callback.message.edit_text(
        "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_yokassa_keyboard()
    ) 