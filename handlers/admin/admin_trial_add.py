from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import aiosqlite
from loguru import logger

from handlers.database import db
from handlers.admin.admin_kb import get_admin_show_trial_keyboard

router = Router()

class TrialAddStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_days = State()

def get_servers_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Å–ø–∏—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_trial")
    return keyboard.as_markup()

@router.callback_query(F.data == "admin_add_trial")
async def start_add_trial(callback: CallbackQuery):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    try:
        await callback.message.delete()
        
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute("""
                SELECT id, name 
                FROM server_settings 
                WHERE is_enable = 1
            """) as cursor:
                servers = await cursor.fetchall()

        if not servers:
            await callback.message.answer(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤",
                reply_markup=get_admin_show_trial_keyboard()
            )
            return

        keyboard = InlineKeyboardBuilder()
        for server in servers:
            keyboard.button(
                text=server['name'],
                callback_data=f"select_trial_server_{server['id']}"
            )
        keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_trial")
        keyboard.adjust(2, 1)

        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä (–°—Ç—Ä–∞–Ω—É) –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:",
            reply_markup=keyboard.as_markup()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_admin_show_trial_keyboard()
        )

@router.callback_query(F.data.startswith("select_trial_server_"))
async def process_server_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        server_id = int(callback.data.split('_')[-1])
        
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute(
                "SELECT name FROM server_settings WHERE id = ?",
                (server_id,)
            ) as cursor:
                server = await cursor.fetchone()

        if not server:
            await callback.message.edit_text(
                "–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_admin_show_trial_keyboard()
            )
            return

        await state.update_data(server_id=server_id, server_name=server['name'])
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_trial")

        await callback.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {server['name']} –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, "
            "–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=keyboard.as_markup()
        )
        
        await state.set_state(TrialAddStates.waiting_for_name)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ä–≤–µ—Ä–∞",
            reply_markup=get_admin_show_trial_keyboard()
        )

@router.message(TrialAddStates.waiting_for_name)
async def process_name_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è"""
    try:
        await state.update_data(name=message.text.strip())
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_trial")

        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –ø—Ä–æ–±–Ω—ã—Ö –¥–Ω–µ–π:",
            reply_markup=keyboard.as_markup()
        )
        
        await state.set_state(TrialAddStates.waiting_for_days)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_admin_show_trial_keyboard()
        )
        await state.clear()

@router.message(TrialAddStates.waiting_for_days)
async def process_days_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"""
    try:
        days = int(message.text.strip())
        if days <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")

        data = await state.get_data()
        
        async with aiosqlite.connect(db.db_path) as conn:
            await conn.execute(
                "UPDATE trial_settings SET is_enable = 0 WHERE is_enable = 1"
            )
            
            await conn.execute("""
                INSERT INTO trial_settings (id, name, left_day, server_id, is_enable)
                VALUES ((SELECT COALESCE(MAX(id), 100) + 1 FROM trial_settings), ?, ?, ?, 1)
            """, (data['name'], days, data['server_id']))
            
            await conn.commit()

        message_text = (
            "‚úÖ –ü—Ä–æ–±–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω\n"
            "<blockquote>"
            f"<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {data['name']}\n"
            f"<b>–°—Ä–æ–∫–æ–º –Ω–∞:</b> {days} –¥.\n"
            "</blockquote>\n"
            "–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
        )

        await message.answer(
            text=message_text,
            reply_markup=get_admin_show_trial_keyboard(),
            parse_mode="HTML"
        )
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {data['name']}")

    except ValueError as ve:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)"
        )
        return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞",
            reply_markup=get_admin_show_trial_keyboard()
        )
    finally:
        await state.clear()

@router.callback_query(F.data == "cancel_add_trial")
async def cancel_add_trial(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    await state.clear()
    await callback.message.edit_text(
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_admin_show_trial_keyboard()
    ) 