from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from loguru import logger
import aiosqlite

from handlers.database import db
from handlers.admin.admin_kb import get_servers_keyboard

router = Router()

class ServerAddStates(StatesGroup):
    waiting_for_url = State()
    waiting_for_port = State()
    waiting_for_protocol = State()
    waiting_for_inbound = State()
    waiting_for_path = State()
    waiting_for_login = State()
    waiting_for_password = State()
    waiting_for_name = State()

@router.callback_query(F.data == "add_server")
async def start_server_add(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        if not await db.is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
            return

        await callback.message.delete()
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_server")
        
        await callback.message.answer(
            "üåê –í–≤–µ–¥–∏—Ç–µ URL —Å–µ—Ä–≤–µ—Ä–∞ 3x-ui, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å https:// \n"
            "–ü—Ä–∏–º–µ—Ä: https://3xui.example.com üîë",
            reply_markup=keyboard.as_markup()
        )
        
        await state.set_state(ServerAddStates.waiting_for_url)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(ServerAddStates.waiting_for_url)
async def process_url(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ URL"""
    url = message.text.strip()
    if not url.startswith('https://'):
        await message.answer("URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    await state.update_data(url=url)
    
    await message.answer(
        f"–í—ã –≤–≤–µ–ª–∏ {url}\n"
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—Ç –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–∞–Ω–µ–ª—å:"
    )
    await state.set_state(ServerAddStates.waiting_for_port)

@router.message(ServerAddStates.waiting_for_port)
async def process_port(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞"""
    try:
        port = int(message.text.strip())
        data = await state.get_data()
        
        await state.update_data(port=port)
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="VLESS", callback_data="protocol_vless")
        keyboard.button(text="SHADOWSOCKS", callback_data="protocol_shadowsocks")
        keyboard.adjust(2)
        
        await message.answer(
            f"–í—ã –≤–≤–µ–ª–∏ {data['url']}:{port}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª:",
            reply_markup=keyboard.as_markup()
        )
        await state.set_state(ServerAddStates.waiting_for_protocol)
    except ValueError:
        await message.answer("–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

@router.callback_query(F.data.startswith("protocol_"))
async def process_protocol(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
    protocol = callback.data.split('_')[1]  # –ø–æ–ª—É—á–∞–µ–º vless –∏–ª–∏ shadowsocks
    data = await state.get_data()
    
    await state.update_data(protocol=protocol)
    
    await callback.message.edit_text(
        f"–í—ã –≤–≤–µ–ª–∏ {data['url']}:{data['port']} (–ø—Ä–æ—Ç–æ–∫–æ–ª: {protocol.upper()})\n"
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ ID –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (inbound_id).\n"
        "–≠—Ç–æ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –ø–∞–Ω–µ–ª–∏ 3x-ui –≤ —Å–ø–∏—Å–∫–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:"
    )
    await state.set_state(ServerAddStates.waiting_for_inbound)

@router.message(ServerAddStates.waiting_for_inbound)
async def process_inbound(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ inbound_id"""
    try:
        inbound_id = int(message.text.strip())
        data = await state.get_data()
        
        await state.update_data(inbound_id=inbound_id)
        
        await message.answer(
            f"–í—ã –≤–≤–µ–ª–∏ {data['url']}:{data['port']} (–ø—Ä–æ—Ç–æ–∫–æ–ª: {data['protocol']})\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å –ø–∞–Ω–µ–ª–∏, –∫ –ø—Ä–∏–º–µ—Ä—É –¥–ª—è https://3xui.example.com/secret_path\n"
            "–∑–¥–µ—Å—å –ø—É—Ç—å —ç—Ç–æ secret_path"
        )
        await state.set_state(ServerAddStates.waiting_for_path)
    except ValueError:
        await message.answer("ID –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

@router.message(ServerAddStates.waiting_for_path)
async def process_path(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏"""
    path = message.text.strip().lstrip('/')
    data = await state.get_data()
    
    await state.update_data(path=path)
    
    await message.answer(
        f"–í—ã –≤–≤–µ–ª–∏ {data['url']}:{data['port']}/{path}\n"
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –õ–æ–≥–∏–Ω:"
    )
    await state.set_state(ServerAddStates.waiting_for_login)

@router.message(ServerAddStates.waiting_for_login)
async def process_login(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞"""
    login = message.text.strip()
    data = await state.get_data()
    
    await state.update_data(login=login)
    
    await message.answer(
        f"–í—ã –≤–≤–µ–ª–∏ {data['url']}:{data['port']}/{data['path']}\n"
        f"–õ–æ–≥–∏–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {login}\n"
        "–ü—Ä–∏—à–ª–∏ –º–Ω–µ –ø–∞—Ä–æ–ª—å:"
    )
    await state.set_state(ServerAddStates.waiting_for_password)

@router.message(ServerAddStates.waiting_for_password)
async def process_password(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
    password = message.text.strip()
    
    await state.update_data(password=password)
    
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ, –º—ã –ø–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏. –û—Å—Ç–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∏–º—è,\n"
        "–≤–≤–µ–¥–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω—É,\n"
        "–≥–¥–µ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è, —ç—Ç–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –≤ —Ç–∞—Ä–∏—Ñ–Ω–æ–º –ø–ª–∞–Ω–µ –≤ –ø–æ–ª–µ –°—Ç—Ä–∞–Ω–∞):"
    )
    await state.set_state(ServerAddStates.waiting_for_name)

@router.message(ServerAddStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        name = message.text.strip()
        data = await state.get_data()
        
        async with aiosqlite.connect(db.db_path) as conn:
            await conn.execute("""
                INSERT INTO server_settings 
                (url, port, secret_path, username, password, name, inbound_id, protocol, is_enable)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, 1)
            """, (data['url'], data['port'], data['path'], data['login'], 
                  data['password'], name, data['inbound_id'], data['protocol']))
            await conn.commit()
        
        await message.answer(
            f"–°–µ—Ä–≤–µ—Ä {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –Ω–µ–≥–æ!",
            reply_markup=get_servers_keyboard()
        )
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä: {name} —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º {data['protocol']}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_servers_keyboard()
        )
    finally:
        await state.clear()

@router.callback_query(F.data == "cancel_add_server")
async def cancel_add_server(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    await state.clear()
    await callback.message.edit_text(
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_servers_keyboard()
    ) 