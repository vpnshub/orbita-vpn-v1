from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile, Message
from handlers.database import Database
from handlers.admin.admin_kb import get_admin_show_raffles_keyboard, get_admin_confirm_delete_raffle_keyboard, get_admin_users_keyboard_cancel
from datetime import datetime
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger
import os
from aiogram.fsm.context import FSMContext
from handlers.admin.admin_states import RaffleState

router = Router()

@router.callback_query(F.data == "admin_show_raffles")
async def show_raffles(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏"""
    db = Database()
    
    raffle = await db.execute_fetchone(
        "SELECT name, description, start_date FROM raffles WHERE status = 'active' ORDER BY start_date DESC LIMIT 1"
    )
    
    await callback.message.delete()
    
    if not raffle:
        await callback.message.answer(
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π",
            reply_markup=get_admin_show_raffles_keyboard()
        )
        return
    
    start_date = datetime.strptime(raffle['start_date'], "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y %H:%M")
    
    message_text = (
        "–ê–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à\n"
        "<blockquote>"
        f"<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {raffle['name']}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {raffle['description']}\n"
        f"<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {start_date}\n"
        "</blockquote>"
    )
    
    await callback.message.answer(
        message_text,
        parse_mode="HTML",
        reply_markup=get_admin_show_raffles_keyboard()
    )

@router.callback_query(F.data == "admin_delete_raffle")
async def delete_raffle_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    await callback.message.edit_text(
        "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à? üéüÔ∏è"
        "–ö–Ω–æ–ø–∫–∞ —Å —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞. ‚ùå",
        reply_markup=get_admin_confirm_delete_raffle_keyboard()
    )

@router.callback_query(F.data == "admin_confirm_delete_raffle")
async def delete_raffle(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    db = Database()
    
    if await db.deactivate_raffle():
        await callback.message.edit_text(
            "‚úÖ –†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n\n"
            "<b>–ü–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞, —É–¥–∞–ª–∏—Ç–µ –≤—Å–µ –±–∏–ª–µ—Ç—ã</b>\n",
            parse_mode="HTML",
            reply_markup=get_admin_show_raffles_keyboard()
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞!\n"
            "<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ</i>",
            parse_mode="HTML",
            reply_markup=get_admin_show_raffles_keyboard()
        )

def get_admin_confirm_delete_tickets_keyboard() -> InlineKeyboardBuilder:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="admin_confirm_delete_tickets")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_show_raffles")
    keyboard.adjust(2)
    return keyboard.as_markup()

@router.callback_query(F.data == "admin_delete_tickets")
async def delete_tickets_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤"""
    await callback.message.edit_text(
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –í—Å–µ –±–∏–ª–µ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.\n"
        "<i>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!</i>",
        parse_mode="HTML",
        reply_markup=get_admin_confirm_delete_tickets_keyboard()
    )

@router.callback_query(F.data == "admin_confirm_delete_tickets")
async def delete_tickets(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –±–∏–ª–µ—Ç–æ–≤"""
    db = Database()
    
    if await db.delete_all_raffle_tickets():
        await callback.message.edit_text(
            "‚úÖ –í—Å–µ –±–∏–ª–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!",
            parse_mode="HTML",
            reply_markup=get_admin_show_raffles_keyboard()
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–æ–≤!\n"
            "<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ</i>",
            parse_mode="HTML",
            reply_markup=get_admin_show_raffles_keyboard()
        )

@router.callback_query(F.data == "admin_save_tickets_to_file")
async def save_tickets_to_file(callback: CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
    db = Database()
    tickets_data = await db.get_tickets_report()
    
    if not tickets_data:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–∏–ª–µ—Ç–∞—Ö",
            reply_markup=get_admin_show_raffles_keyboard()
        )
        return

    filename = f"raffle_tickets_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    with open(filename, 'w', encoding='utf-8') as f:
        for user in tickets_data:
            f.write("-" * 50 + "\n")
            f.write(f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user['username'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n")
            f.write(f"–¢–µ–ª–µ–≥—Ä–∞–º ID: {user['telegram_id']}\n")
            f.write(f"–ù–æ–º–µ—Ä–∞ –±–∏–ª–µ—Ç–æ–≤: {user['tickets']}\n")
            f.write(f"–í—Å–µ–≥–æ –±–∏–ª–µ—Ç–æ–≤: {user['tickets_count']}\n")
        f.write("-" * 50 + "\n")

    try:
        await callback.message.answer_document(
            FSInputFile(filename),
            caption="üìÑ –û—Ç—á–µ—Ç –ø–æ –±–∏–ª–µ—Ç–∞–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞",
            reply_markup=get_admin_users_keyboard_cancel()
        )
        os.remove(filename)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞",
            reply_markup=get_admin_users_keyboard_cancel()
        )

@router.callback_query(F.data == "admin_add_raffle")
async def add_raffle_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞.\n"
        "–≠—Ç–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –∫–Ω–æ–ø–∫–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. üé∞‚ú®"
    )
    await state.set_state(RaffleState.waiting_for_name)

@router.message(RaffleState.waiting_for_name)
async def process_raffle_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    await state.update_data(raffle_name=message.text)
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞.\n"
        "–û–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ —Å –±–∏–ª–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π. üìù"
    )
    await state.set_state(RaffleState.waiting_for_description)

@router.message(RaffleState.waiting_for_description)
async def process_raffle_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    data = await state.get_data()
    raffle_name = data.get("raffle_name")
    
    db = Database()
    if await db.create_raffle(raffle_name, message.text):
        await message.answer(
            "‚úÖ –†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {raffle_name}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {message.text}",
            parse_mode="HTML",
            reply_markup=get_admin_show_raffles_keyboard()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞!\n"
            "<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ</i>",
            parse_mode="HTML",
            reply_markup=get_admin_show_raffles_keyboard()
        )
    
    await state.clear() 