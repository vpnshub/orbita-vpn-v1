from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
import aiosqlite
from loguru import logger
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from handlers.database import db
from handlers.admin.admin_kb import get_admin_show_promo_tariff_keyboard

router = Router()

class PromoStates(StatesGroup):
    waiting_for_limit = State()
    waiting_for_percentage = State()

class PromoTariffStates(StatesGroup):  
    waiting_for_delete = State()  

@router.callback_query(F.data == "admin_show_promo_tariff")
async def show_promo_tariffs(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–æ–≤"""
    try:
        await callback.message.delete()
        
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute("""
                SELECT tp.*, s.name as server_name
                FROM tariff_promo tp
                JOIN server_settings s ON tp.server_id = s.id
                WHERE tp.is_enable = 1
                ORDER BY tp.id
            """) as cursor:
                promo_tariffs = await cursor.fetchall()

        if not promo_tariffs:
            await callback.message.answer(
                "üîç –ü—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=get_admin_show_promo_tariff_keyboard()
            )
            return

        message_text = "üéÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ—ã üéÅ\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. üöÄ\n\n"
        
        for tariff in promo_tariffs:
            message_text += (
                "<blockquote>"
                f"ID: {tariff['id']}\n"
                f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {tariff['name']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {tariff['description']}\n"
                f"–ü—Ä–æ–º–æ –¥–Ω–µ–π: {tariff['left_day']}\n"
                f"–°—Ç—Ä–∞–Ω–∞: {tariff['server_name']}\n"
                "</blockquote>\n"
            )

        await callback.message.answer(
            text=message_text,
            reply_markup=get_admin_show_promo_tariff_keyboard(),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–æ–≤: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–æ–≤",
            reply_markup=get_admin_show_promo_tariff_keyboard()
        ) 

@router.callback_query(F.data == "admin_delete_promo_tariff")
async def start_delete_promo_tariff(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞"""
    try:
        await callback.message.delete()
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete_promo")
        
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ —Ç–∞—Ä–∏—Ñ–∞:",
            reply_markup=keyboard.as_markup()
        )
        
        await state.set_state(PromoTariffStates.waiting_for_delete)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_admin_show_promo_tariff_keyboard()
        )

@router.message(PromoTariffStates.waiting_for_delete)
async def process_delete_promo_tariff(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞"""
    try:
        tariff_id = int(message.text.strip())
        
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            
            async with conn.execute("""
                SELECT tp.*, s.name as server_name 
                FROM tariff_promo tp
                JOIN server_settings s ON tp.server_id = s.id
                WHERE tp.id = ? AND tp.is_enable = 1
            """, (tariff_id,)) as cursor:
                tariff = await cursor.fetchone()
                
            if not tariff:
                await message.answer(
                    "‚ùå –ü—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω.",
                    reply_markup=get_admin_show_promo_tariff_keyboard()
                )
                await state.clear()
                return
                
            await conn.execute(
                "UPDATE tariff_promo SET is_enable = 0 WHERE id = ?",
                (tariff_id,)
            )
            await conn.commit()
            
        await message.answer(
            f"‚úÖ –ü—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ '{tariff['name']}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_admin_show_promo_tariff_keyboard()
        )
        logger.info(f"–£–¥–∞–ª–µ–Ω –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ: {tariff['name']} (ID: {tariff_id})")
        
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)"
        )
        return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_admin_show_promo_tariff_keyboard()
        )
    finally:
        await state.clear()

@router.callback_query(F.data == "cancel_delete_promo")
async def cancel_delete_promo(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞"""
    await state.clear()
    await callback.message.edit_text(
        "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_admin_show_promo_tariff_keyboard()
    ) 