from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import aiosqlite
from loguru import logger

from handlers.database import db
from handlers.admin.admin_kb import get_admin_show_promo_tariff_keyboard, get_admin_users_keyboard_cancel

router = Router()

class PromoTariffStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_days = State()
    waiting_for_server = State()

def get_cancel_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_promo_tariff")
    return keyboard.as_markup()

async def get_servers_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏"""
    keyboard = InlineKeyboardBuilder()
    
    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("""
            SELECT id, name 
            FROM server_settings 
            WHERE is_enable = 1
        """) as cursor:
            servers = await cursor.fetchall()
            
    for server in servers:
        keyboard.button(
            text=server['name'],
            callback_data=f"select_promo_server:{server['id']}"
        )
    
    keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_promo_tariff")
    keyboard.adjust(2, 2)
    return keyboard.as_markup()

@router.callback_query(F.data == "admin_add_promo_tariff")
async def start_add_promo_tariff(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞"""
    try:
        await callback.message.delete()
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(PromoTariffStates.waiting_for_name)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_admin_show_promo_tariff_keyboard()
        )

@router.message(PromoTariffStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è"""
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=get_cancel_keyboard())
    await state.set_state(PromoTariffStates.waiting_for_description)

@router.message(PromoTariffStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    await state.update_data(description=message.text)
    data = await state.get_data()
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ –¥–Ω–µ–π –≤ —Ç–∞—Ä–∏—Ñ–µ ({data['name']}):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(PromoTariffStates.waiting_for_days)

@router.message(PromoTariffStates.waiting_for_days)
async def process_days(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"""
    try:
        days = int(message.text)
        if days <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(left_day=days)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ —Ç–∞—Ä–∏—Ñ–∞:",
            reply_markup=await get_servers_keyboard()
        )
        await state.set_state(PromoTariffStates.waiting_for_server)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π:")

@router.callback_query(F.data.startswith("select_promo_server:"))
async def process_server_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞"""
    try:
        server_id = int(callback.data.split(":")[1])
        data = await state.get_data()
        
        async with aiosqlite.connect(db.db_path) as conn:
            await conn.execute("""
                INSERT INTO tariff_promo (name, description, left_day, server_id, is_enable)
                VALUES (?, ?, ?, ?, 1)
            """, (data['name'], data['description'], data['left_day'], server_id))
            await conn.commit()

        await callback.message.edit_text(
            "‚úÖ –ü—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=get_admin_users_keyboard_cancel()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞",
            reply_markup=get_admin_show_promo_tariff_keyboard()
        )
    finally:
        await state.clear()

@router.callback_query(F.data == "cancel_add_promo_tariff")
async def cancel_add_promo_tariff(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_admin_show_promo_tariff_keyboard()
    ) 