from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger
import json
import aiosqlite

from handlers.database import db
from handlers.admin.admin_kb import get_admin_keyboard
from handlers.crypto_pay import crypto_pay_manager, CryptoPayAPI

router = Router()

class CryptoPayState(StatesGroup):
    waiting_for_token = State()
    waiting_for_min_amount = State()
    waiting_for_assets = State()
    waiting_for_webhook = State()

def get_crypto_pay_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Crypto Pay"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="crypto_pay_add")
    keyboard.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="crypto_pay_delete")
    keyboard.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤–∞–ª—é—Ç—ã", callback_data="crypto_pay_update_assets")
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_show_payment_settings")
    keyboard.adjust(2, 1)
    return keyboard.as_markup()

@router.callback_query(F.data == "admin_show_crypto_pay")
async def show_crypto_settings(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ Crypto Pay"""
    try:
        if not await db.is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
            return

        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute('SELECT * FROM crypto_settings LIMIT 1') as cursor:
                settings = await cursor.fetchone()

        if settings:
            supported_assets = json.loads(settings['supported_assets']) if settings['supported_assets'] else []
            assets_str = ", ".join(supported_assets) if supported_assets else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"

            message_text = (
                "üìä <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Crypto Pay:</b>\n\n"
                f"üîë API Token: <code>{settings['api_token'][:6]}...{settings['api_token'][-4:]}</code>\n"
                f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {settings['min_amount']} USDT\n"
                f"üí± –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã: {assets_str}\n"
                f"üåê Webhook URL: {settings['webhook_url'] or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
                f"üì° –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if settings['is_enable'] else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}"
            )
        else:
            message_text = "‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Crypto Pay –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

        await callback.message.edit_text(
            text=message_text,
            reply_markup=get_crypto_pay_keyboard(),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Crypto Pay: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)

@router.callback_query(F.data == "crypto_pay_add")
async def start_add_settings(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ API Token –æ—Ç Crypto Pay Bot:",
            reply_markup=None
        )
        await state.set_state(CryptoPayState.waiting_for_token)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(CryptoPayState.waiting_for_token)
async def process_token(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    try:
        await state.update_data(api_token=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –≤ USDT:")
        await state.set_state(CryptoPayState.waiting_for_min_amount)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–∫–µ–Ω–∞: {e}")
        await state.clear()
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_crypto_pay_keyboard()
        )

@router.message(CryptoPayState.waiting_for_min_amount)
async def process_min_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã"""
    try:
        min_amount = float(message.text)
        await state.update_data(min_amount=min_amount)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: USDT,BTC,TON):"
        )
        await state.set_state(CryptoPayState.waiting_for_assets)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã: {e}")
        await state.clear()
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_crypto_pay_keyboard()
        )

@router.message(CryptoPayState.waiting_for_assets)
async def process_assets(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç"""
    try:
        if not await db.is_admin(message.from_user.id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
            await state.clear()
            return

        assets = [asset.strip().upper() for asset in message.text.split(',')]
        data = await state.get_data()
        
        test_api = CryptoPayAPI(data['api_token'])
        try:
            await test_api.get_me()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API —Ç–æ–∫–µ–Ω–∞: {e}")
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π API —Ç–æ–∫–µ–Ω –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º",
                reply_markup=get_crypto_pay_keyboard()
            )
            await state.clear()
            return

        async with aiosqlite.connect(db.db_path) as conn:
            await conn.execute("""
                INSERT OR REPLACE INTO crypto_settings 
                (api_token, min_amount, supported_assets, is_enable)
                VALUES (?, ?, ?, 1)
            """, (data['api_token'], data['min_amount'], json.dumps(assets)))
            await conn.commit()

        await crypto_pay_manager.init_api()

        await message.answer(
            "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Crypto Pay —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
            reply_markup=get_crypto_pay_keyboard()
        )
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            reply_markup=get_crypto_pay_keyboard()
        )
        await state.clear()

@router.callback_query(F.data == "crypto_pay_delete")
async def delete_settings(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Crypto Pay"""
    try:
        async with aiosqlite.connect(db.db_path) as conn:
            await conn.execute('DELETE FROM crypto_settings')
            await conn.commit()

        await callback.message.edit_text(
            "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Crypto Pay —É–¥–∞–ª–µ–Ω—ã",
            reply_markup=get_crypto_pay_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)

@router.callback_query(F.data == "crypto_pay_update_assets")
async def update_assets(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ API"""
    try:
        if not crypto_pay_manager.api:
            await callback.answer("API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", show_alert=True)
            return

        currencies = await crypto_pay_manager.api.get_currencies()
        assets = [curr['code'] for curr in currencies]

        async with aiosqlite.connect(db.db_path) as conn:
            await conn.execute(
                'UPDATE crypto_settings SET supported_assets = ?',
                (json.dumps(assets),)
            )
            await conn.commit()

        await callback.answer("–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!", show_alert=True)
        await show_crypto_settings(callback)  

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç", show_alert=True) 