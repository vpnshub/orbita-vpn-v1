from aiogram import Router, F, types
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger
import os
import sys
import asyncio

from handlers.database import db
from handlers.admin.admin_kb import get_admin_user_sub_notify_keyboard

router = Router()

class NotifySettingsStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    waiting_for_name = State()
    waiting_for_interval = State()

class DisableNotifyStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    waiting_for_name_off = State()

@router.callback_query(F.data == "admin_user_sub_notification")
async def process_user_sub_notification(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        notify_settings = await db.get_active_notify_settings()
        
        settings_info = []
        if notify_settings:
            for setting in notify_settings:
                name = setting['name']
                is_enable = "–í–∫–ª—é—á–µ–Ω–æ" if setting['is_enable'] == 1 else "–í—ã–∫–ª—é—á–µ–Ω–æ"
                interval = setting['interval']
                settings_info.append(f"üìù <b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {name}\nüîî <b>–°—Ç–∞—Ç—É—Å:</b> {is_enable}\nüïõ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> {interval}")
        else:
            settings_info.append("üìù <b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\nüîî <b>–°—Ç–∞—Ç—É—Å:</b> –í—ã–∫–ª—é—á–µ–Ω–æ\nüïõ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

        message_text = (
            "‚ú® <b>–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> ‚ú®\n\n"
            "üì¢ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π:\n"
            "- –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
            "<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            "<blockquote>"
            f"{'\n'.join(settings_info)}\n"
            "</blockquote>"
        )

        await callback.message.edit_text(
            text=message_text,
            reply_markup=get_admin_user_sub_notify_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", show_alert=True)

@router.callback_query(F.data == "admin_edit_user_notify")
async def process_edit_user_notify(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        await callback.message.delete()
        
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞",
            parse_mode="HTML"
        )
        
        await state.set_state(NotifySettingsStates.waiting_for_name)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(NotifySettingsStates.waiting_for_name)
async def process_notify_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    try:
        await state.update_data(notify_name=message.text)
        
        await message.delete()
        
        await message.answer(
            f"‚è≥ <b>–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö</b> ‚è≥\n"
            f"<blockquote>"
            f"–ï—Å–ª–∏ —É–∫–∞–∑–∞—Ç—å 120, –±–æ—Ç –±—É–¥–µ—Ç –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
            f"üì¢ –ï—Å–ª–∏ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –º–µ–Ω–µ–µ —Å—É—Ç–æ–∫, –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞."
            f"</blockquote>",
            parse_mode="HTML"
        )
        
        await state.set_state(NotifySettingsStates.waiting_for_interval)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è")
        await state.clear()

@router.message(NotifySettingsStates.waiting_for_interval)
async def process_notify_interval(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    try:
        try:
            interval = int(message.text)
            if interval <= 0:
                raise ValueError("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç")
            return
            
        data = await state.get_data()
        notify_name = data.get('notify_name')
        
        success = await db.add_notify_setting(
            name=notify_name,
            interval=interval,
            type='subscription_check'
        )
        
        await message.delete()
        
        if success:
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_user_sub_notification")]
            ])
            
            await message.answer(
                f"‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ \"{notify_name}\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
                f"–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫...",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            await state.clear()
            
            await asyncio.sleep(2)
            
            logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
            python = sys.executable
            os.execv(python, [python] + sys.argv)
            
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        await state.clear()

@router.callback_query(F.data == "admin_off_user_notify")
async def process_off_user_notify(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        active_settings = await db.get_active_notify_settings()
        
        settings_info = []
        for setting in active_settings:
            type_text = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫" if setting['type'] == 'subscription_check' else "–î—Ä—É–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
            settings_info.append(f"üìù <b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {setting['name']}\nüí´ <b>–¢–∏–ø:</b> {type_text}")
        
        if not settings_info:
            settings_info = ["–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤"]
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_user_sub_notification")]
        ])
        
        message_text = (
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è\n"
            "<blockquote>\n"
            "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏:\n"
            f"{chr(10).join(settings_info)}\n"
            "</blockquote>"
        )
        
        await callback.message.delete()
        
        await callback.message.answer(
            text=message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await state.set_state(DisableNotifyStates.waiting_for_name_off)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(DisableNotifyStates.waiting_for_name_off)
async def process_disable_notify_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è"""
    try:
        success = await db.update_notify_setting_by_name(message.text, is_enable=False)
        
        await message.delete()
        
        if success:
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_user_sub_notification")]
            ])
            
            await message.answer(
                f"‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ \"{message.text}\" —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω!",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="admin_off_user_notify")]
            ])
            await message.answer(
                "‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
        await state.clear()
