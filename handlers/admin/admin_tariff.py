from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger
import aiosqlite
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from handlers.database import db
from handlers.admin.admin_kb import get_admin_keyboard

router = Router()

class TariffDeleteStates(StatesGroup):
    waiting_for_name = State()

def get_admin_show_tariff_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞–º–∏"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="add_tariff")
    keyboard.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="delete_tariff")
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="tariff_back_to_admin")
    keyboard.adjust(2, 1)
    return keyboard.as_markup()

@router.callback_query(F.data == "admin_show_tariff")
async def show_tariffs(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤"""
    try:
        await callback.message.delete()
        
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute("""
                SELECT t.*, s.name as server_name 
                FROM tariff t 
                JOIN server_settings s ON t.server_id = s.id 
                WHERE t.is_enable = 1
                ORDER BY t.id
            """) as cursor:
                tariffs = await cursor.fetchall()

        if not tariffs:
            await callback.message.answer(
                "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                reply_markup=get_admin_show_tariff_keyboard()
            )
            return

        message_text = "üìã <b>–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤:</b>\n\n"
        
        for tariff in tariffs:
            message_text += (
                f"<blockquote>"
                f"<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {tariff['name']}\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {tariff['description']}\n"
                f"<b>–°—Ä–æ–∫:</b> {tariff['left_day']} –¥–Ω–µ–π\n"
                f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {tariff['price']} —Ä—É–±.\n"
                f"<b>–°—Ç—Ä–∞–Ω–∞:</b> {tariff['server_name']}\n"
                f"</blockquote>\n"
            )

        await callback.message.answer(
            text=message_text,
            reply_markup=get_admin_show_tariff_keyboard(),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–æ–≤: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤",
            reply_markup=get_admin_keyboard()
        )

@router.callback_query(F.data == "tariff_back_to_admin")
async def process_back_to_admin(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    try:
        await callback.message.delete()
        admin_message = await db.get_bot_message("admin")
        text = admin_message['text'] if admin_message else "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
        await callback.message.answer(
            text=text,
            reply_markup=get_admin_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            reply_markup=get_admin_keyboard()
        )

@router.callback_query(F.data == "delete_tariff")
async def start_delete_tariff(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞"""
    try:
        await callback.message.delete()
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete_tariff")
        
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=keyboard.as_markup()
        )
        
        await state.set_state(TariffDeleteStates.waiting_for_name)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_admin_show_tariff_keyboard()
        )

@router.message(TariffDeleteStates.waiting_for_name)
async def process_delete_tariff(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ –∏ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ"""
    try:
        tariff_name = message.text.strip()
        
        async with aiosqlite.connect(db.db_path) as conn:
            async with conn.execute(
                "SELECT name FROM tariff WHERE name = ? AND is_enable = 1",
                (tariff_name,)
            ) as cursor:
                tariff = await cursor.fetchone()
                
            if not tariff:
                await message.answer(
                    "‚ùå –¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=get_admin_show_tariff_keyboard()
                )
                await state.clear()
                return
                
            await conn.execute(
                "UPDATE tariff SET is_enable = 0 WHERE name = ?",
                (tariff_name,)
            )
            await conn.commit()
            
        await message.answer(
            f"‚úÖ –¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω '{tariff_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
            reply_markup=get_admin_show_tariff_keyboard()
        )
        logger.info(f"–£–¥–∞–ª–µ–Ω —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω: {tariff_name}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_admin_show_tariff_keyboard()
        )
    finally:
        await state.clear()

@router.callback_query(F.data == "cancel_delete_tariff")
async def cancel_delete_tariff(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞"""
    await state.clear()
    await callback.message.edit_text(
        "–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_admin_show_tariff_keyboard()
    ) 