from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from handlers.database import Database
from handlers.admin.admin_kb import get_admin_add_users_balance_keyboard, get_admin_balance_back_edit_keyboard
from handlers.user.user_kb import get_user_balance_keyboard, get_user_edit_balance_keyboard
import aiosqlite
from loguru import logger
from datetime import datetime
import re
from aiogram.fsm.context import FSMContext
from handlers.admin.admin_states import AdminBalanceState

router = Router()

def get_add_balance_keyboard(user_id: int) -> InlineKeyboardBuilder:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Å—É–º–º–∞–º–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    keyboard = InlineKeyboardBuilder()
    amounts = [100, 250, 500, 750, 1000, 1500, 2000, 2500]
    
    for amount in amounts:
        keyboard.button(
            text=f"{amount} —Ä—É–±.",
            callback_data=f"add_balance:{user_id}:{amount}"
        )
    
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_show_users_balance")
    keyboard.adjust(2)  
    return keyboard.as_markup()

@router.callback_query(F.data == "admin_add_users_balance")
async def show_add_balance_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    try:
        db = Database()
        
        message_text = callback.message.text
        user_id = None
        
        if "telegram_id:" in message_text:
            user_id = message_text.split("telegram_id:")[1].split()[0].strip()
        elif "ID:" in message_text:
            user_id = message_text.split("ID:")[1].split()[0].strip()
        else:
            username_match = re.search(r'<b>(.*?)</b>', message_text)
            if username_match:
                username = username_match.group(1)
                async with aiosqlite.connect(db.db_path) as conn:
                    async with conn.execute(
                        "SELECT telegram_id FROM user WHERE username = ?",
                        (username,)
                    ) as cursor:
                        result = await cursor.fetchone()
                        user_id = result[0] if result else None
        
        if not user_id:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        async with aiosqlite.connect(db.db_path) as conn:
            async with conn.execute(
                "SELECT username FROM user WHERE telegram_id = ?",
                (user_id,)
            ) as cursor:
                user = await cursor.fetchone()
                username = user[0] if user else f"ID: {user_id}"
        
        await callback.message.delete()
        
        await callback.message.answer(
            "üí∞ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n"
            f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>{username}</b>.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è. üí≥‚ú®",
            parse_mode="HTML",
            reply_markup=get_add_balance_keyboard(int(user_id))
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_admin_add_users_balance_keyboard()
        )

@router.callback_query(F.data.startswith("add_balance:"))
async def process_balance_add(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    try:
        _, user_id, amount = callback.data.split(":")
        user_id = int(user_id)
        amount = float(amount)
        
        db = Database()
        logger.info(f"–ù–∞—á–∞–ª–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ —Å—É–º–º—É {amount} —Ä—É–±.")
        
        async with aiosqlite.connect(db.db_path) as conn:
            async with conn.execute(
                "SELECT username FROM user WHERE telegram_id = ?",
                (user_id,)
            ) as cursor:
                user = await cursor.fetchone()
                username = user[0] if user else f"ID: {user_id}"
            
            async with conn.execute(
                "SELECT balance FROM user_balance WHERE user_id = ?",
                (user_id,)
            ) as cursor:
                current_balance = await cursor.fetchone()
            
            if current_balance:
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. "
                          f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance[0]}, —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount}")
                await conn.execute(
                    """
                    UPDATE user_balance 
                    SET balance = balance + ?, last_update = CURRENT_TIMESTAMP 
                    WHERE user_id = ?
                    """,
                    (amount, user_id)
                )
            else:
                logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å —Å—É–º–º–æ–π {amount}")
                await conn.execute(
                    """
                    INSERT INTO user_balance (user_id, balance) 
                    VALUES (?, ?)
                    """,
                    (user_id, amount)
                )
            
            await conn.execute(
                """
                INSERT INTO balance_transactions 
                (user_id, amount, type, description) 
                VALUES (?, ?, 'deposit', '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
                """,
                (user_id, amount)
            )
            
            await conn.commit()
            logger.info(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ä—É–±.")
            
            try:
                await callback.bot.send_message(
                    chat_id=user_id,
                    text="üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n\n"
                         f"–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{amount:.2f}</b> —Ä—É–±.",
                    parse_mode="HTML",
                    reply_markup=get_user_edit_balance_keyboard()
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            await callback.message.edit_text(
                "‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{username}</b>\n"
                f"–°—É–º–º–∞: <b>{amount:.2f}</b> —Ä—É–±.",
                parse_mode="HTML",
                reply_markup=get_admin_balance_back_edit_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_admin_add_users_balance_keyboard()
        )

@router.callback_query(F.data == "admin_reset_users_balance")
async def start_reset_balance(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    try:
        message_text = callback.message.text
        user_id = None
        
        if "telegram_id:" in message_text:
            user_id = message_text.split("telegram_id:")[1].split()[0].strip()
        elif "ID:" in message_text:
            user_id = message_text.split("ID:")[1].split()[0].strip()
        else:
            username_match = re.search(r'<b>(.*?)</b>', message_text)
            if username_match:
                username = username_match.group(1)
                async with aiosqlite.connect(db.db_path) as conn:
                    async with conn.execute(
                        "SELECT telegram_id FROM user WHERE username = ?",
                        (username,)
                    ) as cursor:
                        result = await cursor.fetchone()
                        user_id = result[0] if result else None
        
        if not user_id:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        await state.update_data(user_id=user_id)
        
        await callback.message.delete()
        
        await callback.message.answer(
            "üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤."
        )
        
        await state.set_state(AdminBalanceState.waiting_for_reset_reason)
        
        logger.info(f"–ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_admin_add_users_balance_keyboard()
        )

@router.message(AdminBalanceState.waiting_for_reset_reason)
async def process_reset_balance(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    try:
        state_data = await state.get_data()
        user_id = state_data.get('user_id')
        reason = message.text.strip()
        
        db = Database()
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è")
        
        async with aiosqlite.connect(db.db_path) as conn:
            async with conn.execute(
                """
                SELECT ub.balance, u.username 
                FROM user_balance ub 
                LEFT JOIN user u ON u.telegram_id = ub.user_id 
                WHERE ub.user_id = ?
                """,
                (user_id,)
            ) as cursor:
                result = await cursor.fetchone()
                
            if not result:
                logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è")
                await message.answer(
                    "‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è",
                    reply_markup=get_admin_add_users_balance_keyboard()
                )
                await state.clear()
                return
                
            current_balance = result[0]
            username = result[1] or f"ID: {user_id}"
            
            if current_balance <= 0:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω—É–ª–∏—Ç—å –Ω—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await message.answer(
                    f"‚ÑπÔ∏è –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{username}</b> —É–∂–µ —Ä–∞–≤–µ–Ω –Ω—É–ª—é.\n"
                    "–û–±–Ω—É–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.",
                    parse_mode="HTML",
                    reply_markup=get_admin_balance_back_edit_keyboard()
                )
                await state.clear()
                return
            
            await conn.execute(
                """
                INSERT INTO balance_transactions 
                (user_id, amount, type, description) 
                VALUES (?, ?, 'reset', ?)
                """,
                (user_id, -current_balance, f"–û–±–Ω—É–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            )
            
            await conn.execute(
                """
                UPDATE user_balance 
                SET balance = 0, last_update = CURRENT_TIMESTAMP 
                WHERE user_id = ?
                """,
                (user_id,)
            )
            
            await conn.commit()
            logger.info(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª–µ–Ω. –ë—ã–ª–æ —Å–ø–∏—Å–∞–Ω–æ: {current_balance:.2f} —Ä—É–±.")
            
            try:
                await message.bot.send_message(
                    chat_id=user_id,
                    text=(
                        "‚ùóÔ∏è –í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –æ–±–Ω—É–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\n"
                        f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                        f"–°–ø–∏—Å–∞–Ω–æ: {current_balance:.2f} —Ä—É–±."
                    ),
                    parse_mode="HTML",
                    reply_markup=get_user_balance_keyboard()
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω—É–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            await message.answer(
                "‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª–µ–Ω!\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{username}</b>\n"
                f"–°–ø–∏—Å–∞–Ω–æ: <b>{current_balance:.2f}</b> —Ä—É–±.\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}",
                parse_mode="HTML",
                reply_markup=get_admin_balance_back_edit_keyboard()
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_admin_add_users_balance_keyboard()
        )
        await state.clear() 