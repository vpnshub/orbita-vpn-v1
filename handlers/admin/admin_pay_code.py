from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from handlers.database import db
from handlers.admin.admin_kb import get_admin_show_payments_code_keyboard
from datetime import datetime
from loguru import logger
import random
import string

router = Router()

class PaymentCodeStates(StatesGroup):
    waiting_for_count = State()
    waiting_for_amount = State()
    waiting_for_delete_code = State()

def generate_payment_code(length: int = 12) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –æ–ø–ª–∞—Ç—ã"""
    chars = string.ascii_uppercase + string.digits
    return ''.join(random.choices(chars, k=length))

@router.callback_query(F.data == "admin_show_payments_code")
async def show_payment_codes(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã"""
    try:
        payment_codes = await db.get_all_payment_codes()
        
        active_codes = [code for code in payment_codes if code['is_enable']]
        
        total_sum = sum(code['sum'] for code in active_codes)
        
        recent_codes = sorted(
            payment_codes, 
            key=lambda x: datetime.strptime(x['create_date'], '%Y-%m-%d %H:%M:%S'),
            reverse=True
        )[:2]
        
        message = "üí∞ –ö–æ–¥—ã –æ–ø–ª–∞—Ç—ã:\n\n"
        message += f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤: {len(active_codes)}\n"
        message += f"–ù–∞ —Å—É–º–º—É: {total_sum:.2f} ‚ÇΩ\n\n"
        
        if recent_codes:
            message += "2 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–∞:\n"
            for code in recent_codes:
                message += "<blockquote>\n"
                message += f"<code>{code['pay_code']}</code>\n"
                message += f"–°—É–º–º–∞: {code['sum']} ‚ÇΩ\n"
                message += f"–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {code['create_date']}\n"
                message += f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if code['is_enable'] else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
                message += "</blockquote>\n"
        else:
            message += "–ö–æ–¥—ã –æ–ø–ª–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"

        await callback.message.delete()
        await callback.message.answer(
            text=message,
            reply_markup=get_admin_show_payments_code_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã", show_alert=True)

@router.callback_query(F.data == "admin_add_payments_code")
async def add_payment_code(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞ –æ–ø–ª–∞—Ç—ã"""
    await callback.message.delete()
    await callback.message.answer(
        "üíµ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è\n"
        "(–ö –ø—Ä–∏–º–µ—Ä—É –µ—Å–ª–∏ –≤–≤–µ—Å—Ç–∏ 10 —Ç–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ 10 –∫–æ–¥–æ–≤)"
    )
    await state.set_state(PaymentCodeStates.waiting_for_count)
    await callback.answer()

@router.message(PaymentCodeStates.waiting_for_count)
async def process_codes_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–¥–æ–≤"""
    try:
        count = int(message.text)
        if count <= 0 or count > 100:  
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100")
            return
        
        await state.update_data(codes_count=count)
        await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–∏–Ω–∞–ª –∫–æ–¥–∞ –æ–ø–ª–∞—Ç—ã:")
        await state.set_state(PaymentCodeStates.waiting_for_amount)
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

@router.message(PaymentCodeStates.waiting_for_amount)
async def process_codes_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–∏–Ω–∞–ª–∞ –∫–æ–¥–∞"""
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        
        data = await state.get_data()
        codes_count = data['codes_count']
        
        generated_codes = []
        total_sum = amount * codes_count
        
        for _ in range(codes_count):
            while True:
                code = generate_payment_code()
                if not await db.get_payment_code(code):
                    break
            
            if await db.add_payment_code(code, amount):
                generated_codes.append({"code": code, "sum": amount})
        
        message_text = f"‚úÖ –í—ã –¥–æ–±–∞–≤–∏–ª–∏ {codes_count} –∫–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã –Ω–∞ —Å—É–º–º—É: {total_sum:.2f} ‚ÇΩ\n"
        
        if codes_count > 5:
            message_text += "üìã –ü–µ—Ä–≤—ã–µ 5 –∫–æ–¥–æ–≤:\n\n"
            for code_info in generated_codes[:5]:
                message_text += "<blockquote>\n"
                message_text += f"–ö–æ–¥ –æ–ø–ª–∞—Ç—ã:<code> {code_info['code']}</code>\n"
                message_text += f"–°—É–º–º–∞: {code_info['sum']} ‚ÇΩ\n"
                message_text += "</blockquote>\n"
            message_text += "\nüíæ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–æ–¥—ã –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥—ã'"
        else:
            message_text += "üìã –°–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤:\n\n"
            for code_info in generated_codes:
                message_text += "<blockquote>\n"
                message_text += f"–ö–æ–¥ –æ–ø–ª–∞—Ç—ã:<code> {code_info['code']}</code>\n"
                message_text += f"–°—É–º–º–∞: {code_info['sum']} ‚ÇΩ\n"
                message_text += "</blockquote>\n"
        
        await message.answer(
            message_text,
            parse_mode="HTML",
            reply_markup=get_admin_show_payments_code_keyboard()
        )
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã",
            reply_markup=get_admin_show_payments_code_keyboard()
        )
        await state.clear()

@router.callback_query(F.data == "admin_delete_payments_code")
async def delete_payment_code(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–¥–∞ –æ–ø–ª–∞—Ç—ã"""
    await callback.message.delete()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –æ–ø–ª–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(PaymentCodeStates.waiting_for_delete_code)
    await callback.answer()

@router.message(PaymentCodeStates.waiting_for_delete_code)
async def process_delete_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        payment_code = await db.get_payment_code(message.text)
        
        if not payment_code:
            await message.answer(
                "‚ùå –ö–æ–¥ –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω",
                reply_markup=get_admin_show_payments_code_keyboard()
            )
            await state.clear()
            return
        
        if await db.disable_payment_code(message.text):
            message_text = "‚úÖ –ö–æ–¥ –æ–ø–ª–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n\n"
            message_text += "<blockquote>\n"
            message_text += f"–ö–æ–¥:<code> {payment_code['pay_code']}</code>\n"
            message_text += f"–°—É–º–º–∞: {payment_code['sum']} ‚ÇΩ\n"
            message_text += f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {payment_code['create_date']}\n"
            message_text += "</blockquote>"
            
            await message.answer(
                message_text,
                parse_mode="HTML",
                reply_markup=get_admin_show_payments_code_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–¥–∞",
                reply_markup=get_admin_show_payments_code_keyboard()
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–¥–∞ –æ–ø–ª–∞—Ç—ã: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
            reply_markup=get_admin_show_payments_code_keyboard()
        )
        await state.clear() 