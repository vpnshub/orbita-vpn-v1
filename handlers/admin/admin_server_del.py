from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger
import aiosqlite

from handlers.database import db
from handlers.admin.admin_kb import get_servers_keyboard

router = Router()

class ServerDeleteStates(StatesGroup):
    waiting_for_confirmation = State()

async def get_server_list_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    keyboard = InlineKeyboardBuilder()
    
    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        cursor = await conn.execute(
            "SELECT id, name FROM server_settings WHERE is_enable = 1"
        )
        servers = await cursor.fetchall()
    
    for server in servers:
        keyboard.button(
            text=server['name'],
            callback_data=f"delete_server:{server['id']}"
        )
    
    keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="servers_back_to_admin")
    keyboard.adjust(1)
    return keyboard.as_markup()

def get_confirmation_keyboard(server_id: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
        callback_data=f"confirm_delete_server:{server_id}"
    )
    keyboard.button(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data="cancel_delete_server"
    )
    keyboard.adjust(2)
    return keyboard.as_markup()

@router.callback_query(F.data == "delete_server")
async def start_server_delete(callback: CallbackQuery):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        if not await db.is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
            return

        await callback.message.edit_text(
            "üóë –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=await get_server_list_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_servers_keyboard()
        )

@router.callback_query(F.data.startswith("delete_server:"))
async def confirm_server_delete(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        server_id = int(callback.data.split(':')[1])
        
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            cursor = await conn.execute(
                "SELECT name FROM server_settings WHERE id = ?",
                (server_id,)
            )
            server = await cursor.fetchone()
            
            if not server:
                await callback.answer("–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            await state.update_data(server_id=server_id, server_name=server['name'])
            
            await callback.message.edit_text(
                f"‚ùóÔ∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ—Ä–≤–µ—Ä ¬´{server['name']}¬ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è\n"
                "‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n"
                "–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã.",
                reply_markup=get_confirmation_keyboard(server_id)
            )
            
            await state.set_state(ServerDeleteStates.waiting_for_confirmation)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("confirm_delete_server:"))
async def process_delete_server(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    try:
        data = await state.get_data()
        server_id = data.get('server_id')
        server_name = data.get('server_name')
        
        async with aiosqlite.connect(db.db_path) as conn:
            await conn.execute(
                "UPDATE tariff SET is_enable = 0 WHERE server_id = ?",
                (server_id,)
            )
            
            cursor = await conn.execute(
                "SELECT COUNT(*) FROM tariff WHERE server_id = ?",
                (server_id,)
            )
            disabled_tariffs_count = (await cursor.fetchone())[0]
            
            await conn.execute(
                "DELETE FROM server_settings WHERE id = ?",
                (server_id,)
            )
            await conn.commit()
        
        success_message = (
            f"‚úÖ –°–µ—Ä–≤–µ—Ä ¬´{server_name}¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω\n"
            f"üìä –û—Ç–∫–ª—é—á–µ–Ω–æ —Ç–∞—Ä–∏—Ñ–æ–≤: {disabled_tariffs_count}"
        )
        
        await callback.message.edit_text(
            success_message,
            reply_markup=get_servers_keyboard()
        )
        
        logger.info(f"–£–¥–∞–ª–µ–Ω —Å–µ—Ä–≤–µ—Ä {server_name} (ID: {server_id}) –∏ {disabled_tariffs_count} —Ç–∞—Ä–∏—Ñ–æ–≤")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞",
            reply_markup=get_servers_keyboard()
        )
    finally:
        await state.clear()

@router.callback_query(F.data == "cancel_delete_server")
async def cancel_delete_server(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_servers_keyboard()
    ) 