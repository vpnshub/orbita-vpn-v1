from aiogram import Router, F
from aiogram.types import CallbackQuery
from loguru import logger
import aiosqlite

from handlers.database import db
from handlers.admin.admin_kb import get_admin_notifications_keyboard

router = Router()

@router.callback_query(F.data == "admin_show_notifications")
async def show_notifications_settings(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        await callback.message.delete()
        
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute("""
                SELECT reg_notify, pay_notify
                FROM bot_settings
                LIMIT 1
            """) as cursor:
                settings = await cursor.fetchone()

        if not settings:
            await callback.message.answer(
                "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=get_admin_notifications_keyboard()
            )
            return

        reg_notify = settings['reg_notify'] if settings['reg_notify'] != 0 else "–í—ã–∫–ª—é—á–µ–Ω–æ"
        pay_notify = settings['pay_notify'] if settings['pay_notify'] != 0 else "–í—ã–∫–ª—é—á–µ–Ω–æ"

        message_text = (
            "‚ú® <b>–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> ‚ú®\n\n"
            "üì¢ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π:\n"
            "- –û–ø–æ–≤–µ—â–µ–Ω–∏—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "- –û–ø–æ–≤–µ—â–µ–Ω–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ —Å—á–µ—Ç–∞\n\n"
            "<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            "<blockquote>"
            f"üîî <b>–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {reg_notify}\n"
            f"üí∞ <b>–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ:</b> {pay_notify}\n"
            "</blockquote>"
        )

        await callback.message.answer(
            text=message_text,
            reply_markup=get_admin_notifications_keyboard(),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            reply_markup=get_admin_notifications_keyboard()
        )

@router.callback_query(F.data == "notifications_back_to_admin")
async def process_back_to_admin(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    try:
        await callback.message.delete()
        admin_message = await db.get_bot_message("admin")
        text = admin_message['text'] if admin_message else "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
        await callback.message.answer(
            text=text,
            reply_markup=get_admin_notifications_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            reply_markup=get_admin_notifications_keyboard()
        ) 