from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import aiosqlite
from loguru import logger
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
import random
import string

from handlers.database import db
from handlers.admin.admin_kb import get_admin_keyboard, get_promocodes_keyboard, get_promocodes_keyboard_delete

router = Router()

class PromoStates(StatesGroup):
    waiting_for_limit = State()
    waiting_for_percentage = State()
    waiting_for_delete = State()  

def generate_promocode(length=12):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    chars = string.ascii_uppercase + string.digits
    return ''.join(random.choice(chars) for _ in range(length))

@router.callback_query(F.data == "admin_show_promocodes")
async def process_show_promocodes(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
    try:
        await callback.message.delete()

        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute("""
                SELECT promocod, activation_limit, activation_total, percentage
                FROM promocodes
                WHERE is_enable = 1
                ORDER BY date DESC
            """) as cursor:
                promocodes = await cursor.fetchall()

        if not promocodes:
            message_text = "üìã *–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤*\n\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ—Ç"
        else:
            message_text = "üìã *–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:*\n\n"
            for promo in promocodes:
                remaining_activations = promo['activation_limit'] - promo['activation_total']
                message_text += (
                    f"üéüÔ∏è *–ü—Ä–æ–º–æ–∫–æ–¥:* `{promo['promocod']}`\n"
                    f"üìä –°–∫–∏–¥–∫–∞: *{promo['percentage']}%*\n"
                    f"üîÑ –õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π: *{promo['activation_limit']}*\n"
                    f"‚ú® –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: *{remaining_activations}*\n"
                    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                )

        await callback.message.answer(
            text=message_text,
            parse_mode="Markdown",
            reply_markup=get_promocodes_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤",
            reply_markup=get_admin_keyboard()
        )

@router.callback_query(F.data == "promocodes_back_to_admin")
async def process_back_to_admin(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    try:
        await callback.message.delete()
        admin_message = await db.get_bot_message("admin")
        text = admin_message['text'] if admin_message else "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
        await callback.message.answer(
            text=text,
            reply_markup=get_admin_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            reply_markup=get_admin_keyboard()
        )

@router.callback_query(F.data == "add_promocode")
async def process_add_promocode(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    try:
        await callback.message.delete()
        
        await callback.message.answer(
            "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π\n–ù–∞–ø—Ä–∏–º–µ—Ä 25"
        )
        
        await state.set_state(PromoStates.waiting_for_limit)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_promocodes_keyboard()
        )

@router.message(PromoStates.waiting_for_limit)
async def process_activation_limit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π"""
    try:
        activation_limit = int(message.text)
        
        await state.update_data(activation_limit=activation_limit)
        
        await message.delete()
        
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞"
        )
        
        await state.set_state(PromoStates.waiting_for_percentage)
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_promocodes_keyboard()
        )
        await state.clear()

@router.message(PromoStates.waiting_for_percentage)
async def process_percentage(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å–∫–∏–¥–∫–∏"""
    try:
        percentage = float(message.text)
        
        data = await state.get_data()
        activation_limit = data['activation_limit']
        
        promocode = generate_promocode()
        
        async with aiosqlite.connect(db.db_path) as conn:
            await conn.execute("""
                INSERT INTO promocodes (promocod, activation_limit, percentage, is_enable)
                VALUES (?, ?, ?, 1)
            """, (promocode, activation_limit, percentage))
            await conn.commit()
        
        message_text = (
            "–í—Å–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å!\n"
            "–ù–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É\n"
            f"–ü—Ä–æ–º–æ–∫–æ–¥: {promocode}\n"
            f"–°–∫–∏–¥–∫–∞: {percentage}%\n"
            f"–ö–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {activation_limit}"
        )
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="promocodes_back_to_admin")
        keyboard.adjust(1)
        
        await message.answer(
            text=message_text,
            reply_markup=keyboard.as_markup()
        )
        
        await state.clear()
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_promocodes_keyboard()
        )
        await state.clear()

@router.callback_query(F.data == "delete_promocode")
async def process_delete_promocode(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    try:
        await callback.message.delete()
        
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        )
        
        await state.set_state(PromoStates.waiting_for_delete)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_promocodes_keyboard()
        )

@router.message(PromoStates.waiting_for_delete)
async def process_delete_promo_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        async with aiosqlite.connect(db.db_path) as conn:
            async with conn.execute(
                "SELECT promocod FROM promocodes WHERE promocod = ? AND is_enable = 1",
                (message.text,)
            ) as cursor:
                promo = await cursor.fetchone()
                
                if not promo:
                    await message.answer(
                        "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω.",
                        reply_markup=get_promocodes_keyboard_delete()
                    )
                    await state.clear()
                    return
                
            await conn.execute(
                "UPDATE promocodes SET is_enable = 0 WHERE promocod = ?",
                (message.text,)
            )
            await conn.commit()
        
        await message.answer(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ *{message.text}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            parse_mode="Markdown",
            reply_markup=get_promocodes_keyboard_delete()
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_promocodes_keyboard_delete()
        )
        await state.clear() 