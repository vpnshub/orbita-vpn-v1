from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import aiosqlite
from loguru import logger

from handlers.database import db
from handlers.admin.admin_kb import get_admin_notifications_keyboard

router = Router()

class NotifyEditStates(StatesGroup):
    waiting_for_reg_notify = State()
    waiting_for_pay_notify = State()

def get_cancel_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_notification")
    return keyboard.as_markup()

@router.callback_query(F.data == "admin_add_notification")
async def start_add_notification(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        await callback.message.delete()
        
        await callback.message.answer(
            "üì¢ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ Telegram ID –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, 0 –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞",
            reply_markup=get_cancel_keyboard()
        )
        
        await state.set_state(NotifyEditStates.waiting_for_reg_notify)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_admin_notifications_keyboard()
        )

@router.message(NotifyEditStates.waiting_for_reg_notify)
async def process_reg_notify(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        reg_notify = int(message.text.strip())
        
        await state.update_data(reg_notify=reg_notify)
        
        await message.answer(
            "üì¢ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ Telegram ID –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ, 0 –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞",
            reply_markup=get_cancel_keyboard()
        )
        
        await state.set_state(NotifyEditStates.waiting_for_pay_notify)
        
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ) –∏–ª–∏ 0 –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞"
        )
        return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_admin_notifications_keyboard()
        )
        await state.clear()

@router.message(NotifyEditStates.waiting_for_pay_notify)
async def process_pay_notify(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ"""
    try:
        pay_notify = int(message.text.strip())
        
        data = await state.get_data()
        reg_notify = data.get('reg_notify')
        
        async with aiosqlite.connect(db.db_path) as conn:
            await conn.execute("""
                UPDATE bot_settings 
                SET reg_notify = ?, pay_notify = ?
            """, (reg_notify, pay_notify))
            await conn.commit()
        
        message_text = (
            "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
            "<b>–ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            "<blockquote>"
            f"üîî <b>–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {reg_notify if reg_notify != 0 else '–í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
            f"üí∞ <b>–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ:</b> {pay_notify if pay_notify != 0 else '–í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
            "</blockquote>"
        )
        
        await message.answer(
            text=message_text,
            reply_markup=get_admin_notifications_keyboard(),
            parse_mode="HTML"
        )
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: reg_notify={reg_notify}, pay_notify={pay_notify}")
        
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ) –∏–ª–∏ 0 –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞"
        )
        return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_admin_notifications_keyboard()
        )
    finally:
        await state.clear()

@router.callback_query(F.data == "cancel_add_notification")
async def cancel_add_notification(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    await state.clear()
    await callback.message.edit_text(
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_admin_notifications_keyboard()
    )

@router.callback_query(F.data == "admin_off_notification")
async def turn_off_notifications(callback: CallbackQuery):
    """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        await callback.message.delete()
        
        async with aiosqlite.connect(db.db_path) as conn:
            await conn.execute("""
                UPDATE bot_settings 
                SET reg_notify = 0, pay_notify = 0
            """)
            await conn.commit()
        
        message_text = (
            "‚úÖ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã!\n\n"
            "<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            "<blockquote>"
            "üîî <b>–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> –í—ã–∫–ª—é—á–µ–Ω–æ\n"
            "üí∞ <b>–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ:</b> –í—ã–∫–ª—é—á–µ–Ω–æ\n"
            "</blockquote>"
        )
        
        await callback.message.answer(
            text=message_text,
            reply_markup=get_admin_notifications_keyboard(),
            parse_mode="HTML"
        )
        logger.info("–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_admin_notifications_keyboard()
        ) 