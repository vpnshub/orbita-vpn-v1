from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import aiosqlite
from loguru import logger
from datetime import datetime, timedelta

from handlers.database import db
from handlers.admin.admin_kb import get_admin_show_promo_tariff_keyboard
from handlers.x_ui import xui_manager

router = Router()

class PromoSendStates(StatesGroup):
    waiting_for_username = State()

def get_cancel_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_send_promo")
    return keyboard.as_markup()

async def get_promo_tariffs_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞–º–∏"""
    keyboard = InlineKeyboardBuilder()
    
    async with aiosqlite.connect(db.db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("""
            SELECT tp.*, s.name as server_name 
            FROM tariff_promo tp
            JOIN server_settings s ON tp.server_id = s.id
            WHERE tp.is_enable = 1
        """) as cursor:
            tariffs = await cursor.fetchall()
            
    for tariff in tariffs:
        keyboard.button(
            text=f"{tariff['name']} ({tariff['server_name']})",
            callback_data=f"select_promo_tariff:{tariff['id']}"
        )
    
    keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_send_promo")
    keyboard.adjust(1)
    return keyboard.as_markup()

@router.callback_query(F.data == "admin_send_promo_tariff")
async def start_send_promo(callback: CallbackQuery):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞"""
    try:
        await callback.message.delete()
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:",
            reply_markup=await get_promo_tariffs_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_admin_show_promo_tariff_keyboard()
        )

@router.callback_query(F.data.startswith("select_promo_tariff:"))
async def process_tariff_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞"""
    try:
        tariff_id = int(callback.data.split(":")[1])
        
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute("""
                SELECT tp.*, s.name as server_name, s.* 
                FROM tariff_promo tp
                JOIN server_settings s ON tp.server_id = s.id
                WHERE tp.id = ?
            """, (tariff_id,)) as cursor:
                tariff = await cursor.fetchone()

        if not tariff:
            await callback.message.edit_text(
                "–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_admin_show_promo_tariff_keyboard()
            )
            return

        await state.update_data(tariff=dict(tariff))
        
        message_text = (
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–º–æ —Ç–∞—Ä–∏—Ñ\n"
            "<blockquote>"
            f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {tariff['name']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {tariff['description']}\n"
            f"–ü—Ä–æ–º–æ –¥–Ω–µ–π: {tariff['left_day']}\n"
            f"–°—Ç—Ä–∞–Ω–∞: {tariff['server_name']}\n"
            "</blockquote>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–æ —Ç–∞—Ä–∏—Ñ–∞:"
        )
        
        await callback.message.edit_text(
            message_text,
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML"
        )
        
        await state.set_state(PromoSendStates.waiting_for_username)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∞—Ä–∏—Ñ–∞",
            reply_markup=get_admin_show_promo_tariff_keyboard()
        )

@router.message(PromoSendStates.waiting_for_username)
async def process_username(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        username = message.text.lstrip('@')
        data = await state.get_data()
        tariff = data['tariff']
        
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute(
                "SELECT * FROM user WHERE username = ? AND is_enable = 1",
                (username,)
            ) as cursor:
                user = await cursor.fetchone()

            if not user:
                await message.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=get_admin_show_promo_tariff_keyboard()
                )
                await state.clear()
                return

            async with conn.execute(
                "SELECT * FROM server_settings WHERE id = ?",
                (tariff['server_id'],)
            ) as cursor:
                server = await cursor.fetchone()
                server = dict(server)

        end_date = datetime.now() + timedelta(days=tariff['left_day'])
        vless_link = await xui_manager.create_trial_user(server, tariff, user['telegram_id'])
        
        if not vless_link:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                reply_markup=get_admin_show_promo_tariff_keyboard()
            )
            await state.clear()
            return

        async with aiosqlite.connect(db.db_path) as conn:
            await conn.execute("""
                INSERT INTO user_subscription 
                (user_id, tariff_id, server_id, end_date, vless, is_active)
                VALUES (?, ?, ?, ?, ?, 1)
            """, (user['telegram_id'], tariff['id'], tariff['server_id'], 
                  end_date.strftime('%Y-%m-%d %H:%M:%S'), vless_link))
            await conn.commit()

        admin_message = (
            "‚úÖ –ü—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
            f"üéÅ –¢–∞—Ä–∏—Ñ: {tariff['name']}\n"
            f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            f"üîó –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n<code>{vless_link}</code>"
        )
        
        await message.answer(
            admin_message,
            reply_markup=get_admin_show_promo_tariff_keyboard(),
            parse_mode="HTML"
        )

        user_message = (
            f"üéÅ –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ!\n\n"
            f"–¢–∞—Ä–∏—Ñ: {tariff['name']}\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {tariff['left_day']} –¥–Ω–µ–π\n"
            f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            f"–í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n<code>{vless_link}</code>"
        )
        
        await message.bot.send_message(
            chat_id=user['telegram_id'],
            text=user_message,
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞",
            reply_markup=get_admin_show_promo_tariff_keyboard()
        )
    finally:
        await state.clear()

@router.callback_query(F.data == "cancel_send_promo")
async def cancel_send_promo(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_admin_show_promo_tariff_keyboard()
    ) 