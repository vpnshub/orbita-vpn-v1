from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from handlers.database import Database
from handlers.user.user_kb import get_back_to_start_keyboard
from datetime import datetime
from loguru import logger
import aiosqlite

router = Router()

def format_date(date_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        date_str = date_str.split('.')[0]
        date = datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
        return date.strftime("%d.%m.%Y")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: {e}")
        return date_str

async def get_user_keys_keyboard(telegram_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–ª—é—á–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    db = Database()
    keyboard = []
    
    try:
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            
            async with conn.execute("""
                SELECT us.*, s.name as server_name
                FROM user_subscription us
                JOIN server_settings s ON us.server_id = s.id
                WHERE us.user_id = ? AND us.is_active = 1
            """, (telegram_id,)) as cursor:
                subscriptions = await cursor.fetchall()
                
                for sub in subscriptions:
                    formatted_date = format_date(sub['end_date'])
                    button_text = f"üîë {sub['server_name']} | üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {formatted_date}"
                    keyboard.append([
                        InlineKeyboardButton(
                            text=button_text,
                            callback_data=f"change_key_{sub['id']}"
                        )
                    ])

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–ª—é—á–µ–π: {e}")

    keyboard.append([
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="lk_back_to_start"
        )
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.callback_query(F.data == "lk_my_keys")
async def show_user_keys(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await callback.message.delete()
        
        keyboard = await get_user_keys_keyboard(callback.from_user.id)
        
        has_subscriptions = len(keyboard.inline_keyboard) > 1
        
        if not has_subscriptions:
            await callback.message.answer(
                "üîë <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä.</b>\n\n"
                "üìå –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —É –≤–∞—Å –ø–æ—è–≤–∏—Ç—Å—è –∫–ª—é—á, –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä.",
                reply_markup=get_back_to_start_keyboard(),
                parse_mode="HTML"
            )
            return
        
        await callback.message.answer(
            "üîë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞–º–∏!\n "
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ <b>–∏–∑–º–µ–Ω–∏—Ç—å —Å–µ—Ä–≤–µ—Ä</b> –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ –≤–∞—à–∏—Ö –∫–ª—é—á–µ–π.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∫–ª—é—á –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ. üëá",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é –∫–ª—é—á–µ–π: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_start_keyboard()
        )

@router.callback_query(F.data.startswith("change_key_"))
async def show_available_servers(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è —Å–º–µ–Ω—ã"""
    try:
        await callback.message.delete()
        
        subscription_id = int(callback.data.split('_')[2])
        
        async with aiosqlite.connect(Database().db_path) as conn:
            conn.row_factory = aiosqlite.Row
            
            async with conn.execute("""
                SELECT us.*, ss.name as current_server_name, ss.protocol as current_protocol
                FROM user_subscription us
                JOIN server_settings ss ON us.server_id = ss.id
                WHERE us.id = ? AND us.is_active = 1
            """, (subscription_id,)) as cursor:
                subscription = await cursor.fetchone()
                
            if not subscription:
                await callback.message.answer(
                    "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.",
                    reply_markup=get_back_to_start_keyboard()
                )
                return

            key_protocol = 'shadowsocks' if subscription['vless'].startswith('ss://') else 'vless'
                
            async with conn.execute("""
                SELECT id, name 
                FROM server_settings 
                WHERE id != ? 
                AND is_enable = 1 
                AND protocol = ?
                ORDER BY name
            """, (subscription['server_id'], key_protocol)) as cursor:
                available_servers = await cursor.fetchall()

            if not available_servers:
                await callback.message.answer(
                    f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º {key_protocol} –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∫–ª—é—á–∞.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_back_to_start_keyboard()
                )
                return

        formatted_date = format_date(subscription['end_date'])
        
        keyboard = []
        for server in available_servers:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üñ•Ô∏è {server['name']}",
                    callback_data=f"select_server_{subscription_id}_{server['id']}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="lk_my_keys"
            )
        ])
        
        await callback.message.answer(
            f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å–º–µ–Ω–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∫–ª—é—á–∞:\n"
            f"<blockquote><code>{subscription['vless']}</code></blockquote>\n\n"
            f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{formatted_date}</b>\n"
            f"–¢–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä: <b>{subscription['current_server_name']}</b>\n"
            f"–ü—Ä–æ—Ç–æ–∫–æ–ª: <b>{key_protocol.upper()}</b>\n"
            f"–î–ª—è —Å–º–µ–Ω—ã —Å–µ—Ä–≤–µ—Ä–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ üëá",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
        
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {subscription_id} —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º {key_protocol}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_start_keyboard()
        )

@router.callback_query(F.data.startswith("select_server_"))
async def confirm_server_change(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        await callback.message.delete()
        
        _, _, subscription_id, new_server_id = callback.data.split('_')
        
        async with aiosqlite.connect(Database().db_path) as conn:
            conn.row_factory = aiosqlite.Row
            
            async with conn.execute("""
                SELECT name 
                FROM server_settings 
                WHERE id = ? AND is_enable = 1
            """, (new_server_id,)) as cursor:
                server = await cursor.fetchone()
                
            if not server:
                await callback.message.answer(
                    "‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                    reply_markup=get_back_to_start_keyboard()
                )
                return
        
        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data=f"confirm_change_{subscription_id}_{new_server_id}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="lk_my_keys"
                )
            ]
        ]
        
        await callback.message.answer(
            f"–í–∞—à –∫–ª—é—á –±—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä: <b>{server['name']}</b>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
        
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {subscription_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–º–µ–Ω—ã —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ä–≤–µ—Ä–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_start_keyboard()
        ) 