import random
import aiosqlite
from loguru import logger
from typing import Optional, Dict
from handlers.x_ui import xui_manager
from handlers.x_ui_ss import xui_ss_manager
from handlers.database import db
from datetime import datetime, timedelta
from handlers.admin.admin_kb import get_admin_keyboard
from aiogram.types import Message
from handlers.user.user_kb import get_allocation_tickets_keyboard

class SubscriptionManager:
    @staticmethod
    def generate_user_id() -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return f"@{random.randint(10000, 99999)}"

    async def create_subscription(self, user_id: int, tariff_id: int, is_trial: bool = False, bot = None, payment_id: str = None) -> Optional[Dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(db.db_path) as conn:
                conn.row_factory = aiosqlite.Row
                if is_trial:
                    async with conn.execute("""
                        SELECT t.*, s.* 
                        FROM trial_settings t 
                        JOIN server_settings s ON t.server_id = s.id 
                        WHERE t.id = ? AND t.is_enable = 1
                    """, (tariff_id,)) as cursor:
                        tariff_data = await cursor.fetchone()
                else:
                    async with conn.execute("""
                        SELECT t.*, s.* 
                        FROM tariff t 
                        JOIN server_settings s ON t.server_id = s.id 
                        WHERE t.id = ? AND t.is_enable = 1
                    """, (tariff_id,)) as cursor:
                        tariff_data = await cursor.fetchone()

                if tariff_data:
                    tariff_data = dict(tariff_data)

            if not tariff_data:
                logger.error(f"–¢–∞—Ä–∏—Ñ {tariff_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None

            end_date = datetime.now() + timedelta(days=tariff_data['left_day'])

            if tariff_data.get('protocol') == 'shadowsocks':
                vless_link = await xui_ss_manager.create_ss_user(
                    server_settings=tariff_data,
                    trial_settings=tariff_data,
                    telegram_id=user_id
                )
            else:
                vless_link = await xui_manager.create_trial_user(
                    server_settings=tariff_data,
                    trial_settings=tariff_data,
                    telegram_id=user_id
                )

            if not vless_link:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ X-UI –¥–ª—è {user_id}")
                return None

            async with aiosqlite.connect(db.db_path) as conn:
                await conn.execute("""
                    INSERT INTO user_subscription 
                    (user_id, tariff_id, server_id, end_date, vless, is_active, payment_id)
                    VALUES (?, ?, ?, ?, ?, 1, ?)
                """, (
                    user_id, 
                    tariff_id, 
                    tariff_data['server_id'], 
                    end_date, 
                    vless_link,
                    payment_id
                ))
                await conn.commit()

                if bot:
                    async with conn.execute(
                        'SELECT pay_notify FROM bot_settings LIMIT 1'
                    ) as cursor:
                        notify_settings = await cursor.fetchone()

                    if notify_settings and notify_settings[0] != 0:
                        async with conn.execute(
                            'SELECT username FROM user WHERE telegram_id = ?',
                            (user_id,)
                        ) as cursor:
                            user_data = await cursor.fetchone()
                            username = user_data[0] if user_data else f"ID: {user_id}"

                        message_text = (
                            "üéâ –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞! üèÜ\n"
                            "<blockquote>"
                            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
                            f"üí≥ –¢–∞—Ä–∏—Ñ: {tariff_data['name']}\n"
                            f"üìÖ –î–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                            "üöÄ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</blockquote>"
                        )

                        try:
                            await bot.send_message(
                                chat_id=notify_settings[0],
                                text=message_text,
                                parse_mode="HTML",
                                reply_markup=get_admin_keyboard()
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ: {e}")

            if not is_trial:
                tickets_count = self._calculate_tickets(tariff_data['left_day'])
                if tickets_count > 0:
                    active_raffle = await self._get_active_raffle()
                    if active_raffle:
                        if await db.add_raffle_tickets(
                            user_id=user_id,
                            telegram_id=user_id,
                            tickets_count=tickets_count,
                            raffle_id=active_raffle['id']
                        ):
                            logger.info(f"–ù–∞—á–∏—Å–ª–µ–Ω–æ {tickets_count} –±–∏–ª–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                            
                            if bot:
                                try:
                                    await bot.send_message(
                                        chat_id=user_id,
                                        text=(
                                            f"‚ú® –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{tickets_count}</b> "
                                            f"{'–±–∏–ª–µ—Ç' if tickets_count == 1 else '–±–∏–ª–µ—Ç–∞' if 2 <= tickets_count <= 4 else '–±–∏–ª–µ—Ç–æ–≤'} "
                                            "–∑–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏! \n\n"
                                            "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! üçÄüé≤\n"
                                            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞—à–∏ –±–∏–ª–µ—Ç—ã –º–æ–∂–Ω–æ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–†–æ–∑—ã–≥—Ä—ã—à–∞</b> –≤ –º–µ–Ω—é –Ω–∏–∂–µ. üîñ"
                                        ),
                                        parse_mode="HTML",
                                        reply_markup= await get_allocation_tickets_keyboard()
                                    )
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∏–ª–µ—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

            return {
                'vless': vless_link,
                'end_date': end_date,
                'tariff': tariff_data
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return None

    def _calculate_tickets(self, days: int) -> int:
        """–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∏–ª–µ—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        if days <= 31:
            return 1
        elif days <= 62:
            return 3
        elif days <= 180:
            return 9
        elif days <= 365:
            return 18
        else:
            return 60

    async def _get_active_raffle(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
        try:
            active_raffles = await db.get_active_raffles()
            return active_raffles[0] if active_raffles else None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {e}")
            return None

subscription_manager = SubscriptionManager()

async def process_successful_payment(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        subscription = await subscription_manager.create_subscription(
            user_id=message.from_user.id,
            tariff_id=tariff_id,
            bot=message.bot,    
            payment_id=payment_id
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}") 