from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from handlers.database import Database
from handlers.user.user_kb import get_user_balance_keyboard, get_user_success_transfer_keyboard, get_user_cancel_transfer_keyboard
from loguru import logger
from aiogram.fsm.context import FSMContext
from handlers.user.user_state import TransferState
import aiosqlite

router = Router()

def get_transfer_keyboard(show_send_button: bool = False) -> InlineKeyboardBuilder:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
    keyboard = InlineKeyboardBuilder()
    
    if show_send_button:
        keyboard.button(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_balance")
    
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="lk_my_balance")
    keyboard.adjust(1)
    return keyboard.as_markup()

@router.callback_query(F.data == "start_transfer_balance")
async def show_transfer_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
    try:
        db = Database()
        logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
        current_balance = await db.get_user_balance(callback.from_user.id)
        logger.info(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {current_balance:.2f} —Ä—É–±.")
        
        await callback.message.delete()
        
        if current_balance > 0:
            await callback.message.answer(
                "üí≥ –û–ø–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
                f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: <b>{current_balance:.2f}</b> —Ä—É–±.\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</b> –ø–æ—Å–ª–µ —á–µ–≥–æ –≤–≤–µ–¥–∏—Ç–µ <i><b>–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b></i> "
                "–∏–ª–∏ <i><b>Telegram ID</b></i> –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–û—Ç–º–µ–Ω–∞</b> –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏",
                parse_mode="HTML",
                reply_markup=get_transfer_keyboard(show_send_button=True)
            )
            logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        else:
            await callback.message.answer(
                "üí≥ –û–ø–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤\n\n"
                "‚ùå –£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ, –æ–ø–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                reply_markup=get_transfer_keyboard(show_send_button=False)
            )
            logger.info(f"–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –ø–µ—Ä–µ–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id} (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤)")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_balance_keyboard()
        ) 

def get_confirm_transfer_keyboard() -> InlineKeyboardBuilder:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_transfer")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_transfer")
    keyboard.adjust(1)
    return keyboard.as_markup()

@router.callback_query(F.data == "send_balance")
async def start_transfer(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    try:
        await callback.message.delete()
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=get_user_cancel_transfer_keyboard())
        await state.set_state(TransferState.waiting_for_amount)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–≤–æ–¥–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_balance_keyboard()
        )

@router.message(TransferState.waiting_for_amount)
async def process_transfer_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã"""
    try:
        amount = float(message.text.strip())
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return

        db = Database()
        current_balance = await db.get_user_balance(message.from_user.id)
        
        if amount > current_balance:
            await message.answer(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ: {current_balance:.2f} —Ä—É–±.",
            )
            await state.clear()
            return

        await state.update_data(amount=amount)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ Telegram ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", reply_markup=get_user_cancel_transfer_keyboard())
        await state.set_state(TransferState.waiting_for_recipient)
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_balance_keyboard()
        )
        await state.clear()

@router.message(TransferState.waiting_for_recipient)
async def process_transfer_recipient(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
    try:
        db = Database()
        recipient_id = None
        search_query = message.text.strip()
        
        async with aiosqlite.connect(db.db_path) as conn:
            async with conn.execute(
                "SELECT telegram_id, username FROM user WHERE telegram_id = ? OR LOWER(username) = LOWER(?)",
                (search_query if search_query.isdigit() else -1, search_query)
            ) as cursor:
                recipient = await cursor.fetchone()

        if not recipient:
            await message.answer(
                "‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.",
                reply_markup=get_transfer_keyboard(show_send_button=True)
            )
            await state.clear()
            return

        recipient_id, recipient_username = recipient
        if recipient_id == message.from_user.id:
            await message.answer(
                "‚ùå –ù–µ–ª—å–∑—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å–∞–º–æ–º—É —Å–µ–±–µ",
                reply_markup=get_transfer_keyboard(show_send_button=True)
            )
            await state.clear()
            return

        state_data = await state.get_data()
        amount = state_data['amount']
        
        await state.update_data(recipient_id=recipient_id)
        
        await message.answer(
            f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: <b>{amount:.2f}</b> —Ä—É–±.\n"
            f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: <b>{recipient_username or f'ID: {recipient_id}'}</b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É",
            parse_mode="HTML",
            reply_markup=get_confirm_transfer_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_balance_keyboard()
        )
        await state.clear()

@router.callback_query(F.data == "confirm_transfer")
async def confirm_transfer(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    try:
        state_data = await state.get_data()
        amount = state_data['amount']
        recipient_id = state_data['recipient_id']
        
        db = Database()
        
        current_balance = await db.get_user_balance(callback.from_user.id)
        if amount > current_balance:
            await callback.message.edit_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ",
                reply_markup=get_user_balance_keyboard()
            )
            await state.clear()
            return

        async with aiosqlite.connect(db.db_path) as conn:
            await conn.execute("BEGIN TRANSACTION")
            try:
                await db.update_balance(
                    user_id=callback.from_user.id,
                    amount=-amount,
                    type='transfer_out',
                    description=f"–ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}"
                )
                
                await db.update_balance(
                    user_id=recipient_id,
                    amount=amount,
                    type='transfer_in',
                    description=f"–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}"
                )
                
                await conn.commit()
                
                await callback.message.edit_text(
                    "‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!",
                    reply_markup=get_user_balance_keyboard()
                )
                
                try:
                    await callback.bot.send_message(
                        chat_id=recipient_id,
                        parse_mode="HTML",
                        text=f"üéâ –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥\n\n"
                             f"üí∞ –ù–∞ —Å—É–º–º—É <b>{amount:.2f}</b> —Ä—É–±.\n"
                             f"üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{callback.from_user.username}</b>",
                        reply_markup=get_user_success_transfer_keyboard()
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—é: {e}")
                
            except Exception as e:
                await conn.rollback()
                raise e
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_user_balance_keyboard()
        )
    finally:
        await state.clear()

@router.callback_query(F.data == "cancel_transfer")
async def cancel_transfer(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω",
        reply_markup=get_user_balance_keyboard()
    ) 