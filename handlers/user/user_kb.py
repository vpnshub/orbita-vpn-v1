from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import aiosqlite
from loguru import logger
from handlers.database import db
import logging

logger = logging.getLogger(__name__)

async def get_start_keyboard(show_trial=False) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    builder = InlineKeyboardBuilder()

    if show_trial:
        builder.row(InlineKeyboardButton(text="üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="start_trial"))

    builder.row(InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="start_lk"))
    builder.row(InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="start_tariffs"))
    builder.row(InlineKeyboardButton(text="üìû –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="help_support"))
    
    base_buttons = []
    
    try:
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            cursor = await conn.execute("""
                SELECT name 
                FROM raffles 
                WHERE status = 'active' 
                AND (end_date IS NULL OR end_date > datetime('now'))
                LIMIT 1
            """)
            active_raffle = await cursor.fetchone()
            
            if active_raffle:
                base_buttons.append(
                    InlineKeyboardButton(
                        text=f"üéâ {active_raffle['name']} üéâ", 
                        callback_data="start_raffle"
                    )
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {e}")

    if base_buttons:
        for i in range(0, len(base_buttons), 2):
            row_buttons = base_buttons[i:i+2]
            builder.row(*row_buttons)
    
    builder.row(
        InlineKeyboardButton(text="üîó –ó–∞—Ä–∞–±–æ—Ç–æ–∫", callback_data="referral_program"),
        InlineKeyboardButton(text="üì¢ –ö–∞–Ω–∞–ª", url="https://t.me/+jdyriGutmWthM2Iy")
    )
    
    return builder.as_markup()

def get_lk_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
    builder = InlineKeyboardBuilder()

    buttons = [
        InlineKeyboardButton(text="üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="lk_my_subscriptions"),
        InlineKeyboardButton(text="üí∞ –ú–æ–∏ –ø–ª–∞—Ç–µ–∂–∏", callback_data="lk_my_payments"),
        InlineKeyboardButton(text="üí≤ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="lk_my_balance"),
        InlineKeyboardButton(text="üì¢ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="lk_instructions"),
        InlineKeyboardButton(text="üí¨ –ü–æ–º–æ—â—å", callback_data="start_help"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="lk_back_to_start"),
    ]
    
    for i in range(0, len(buttons), 2):
        builder.row(*buttons[i:i + 2])


    return builder.as_markup()

def get_trial_keyboard(show_connect: bool = True) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    builder = InlineKeyboardBuilder()
    
    if show_connect:
        buttons = [
            InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å", callback_data="trial_connect"),
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="lk_back_to_start"),
        ]
    else:
        buttons = [
            InlineKeyboardButton(text="üí≥ –¢–∞—Ä–∏—Ñ—ã", callback_data="start_tariffs"),
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="lk_back_to_start"),
        ]
    
    builder.row(*buttons)
    
    return builder.as_markup()

def get_trial_vless_keyboard(show_connect: bool = True) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª—é—á–æ–º vless"""
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="üí≥ –¢–∞—Ä–∏—Ñ—ã", callback_data="start_tariffs"),
        InlineKeyboardButton(text="üöÄ VPN –ö–ª–∏–µ–Ω—Ç", callback_data="show_vpn_client"),
        InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="show_settings"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="lk_back_to_start"),
    ]
    builder.row(*buttons[:2])
    builder.row(*buttons[2:4])
    return builder.as_markup()

def get_subscriptions_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫"""
    builder = InlineKeyboardBuilder()

    buttons = [
        InlineKeyboardButton(text="üë§ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–±–∏–Ω–µ—Ç", callback_data="start_lk"),
        InlineKeyboardButton(text="ü§ù –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="merge_subscriptions"),
        InlineKeyboardButton(text="üí≥ –¢–∞—Ä–∏—Ñ—ã", callback_data="start_tariffs"),
        InlineKeyboardButton(text="üí¨ –ü–æ–º–æ—â—å", callback_data="start_help"),
    ]

    for i in range(0, len(buttons), 2):
        builder.row(*buttons[i:i + 2])

    builder.row(InlineKeyboardButton(text="üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏", callback_data="lk_my_keys"))

    return builder.as_markup()

def get_continue_merge_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫"""
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="üë§ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–±–∏–Ω–µ—Ç", callback_data="start_lk"),
        InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_merge"),
    ]
    
    builder.row(*buttons[:2])
    return builder.as_markup()

def get_back_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥"""
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="üë§ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–±–∏–Ω–µ—Ç", callback_data="start_lk"),
    ]
    
    builder.row(*buttons[:2])
    return builder.as_markup()

def get_success_by_keyboard(show_connect: bool = True) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª—é—á–æ–º vless"""
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="start_lk"),
        InlineKeyboardButton(text="üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="lk_my_subscriptions"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="lk_back_to_start"),
    ]
    builder.row(*buttons[:2])
    builder.row(*buttons[2:4])
    return builder.as_markup()

def get_help_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–º–æ—â–∏"""
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="ü§ù –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="merge_subscriptions"),
        InlineKeyboardButton(text="üìû –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="help_support"),
        InlineKeyboardButton(text="üë§ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–±–∏–Ω–µ—Ç", callback_data="start_lk"),
    ]
    
    builder.row(*buttons[:2])
    builder.row(*buttons[2:4])
    return builder.as_markup()

def get_no_subscriptions_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º —á—Ç–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="üë§ –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="start_lk"),
        InlineKeyboardButton(text="üí≥ –¢–∞—Ä–∏—Ñ—ã", callback_data="start_tariffs"),
        InlineKeyboardButton(text="üìû –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="help_support"),
    ]
    
    builder.row(*buttons[:2])
    builder.row(*buttons[2:4])
    return builder.as_markup()

def get_user_instructions_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"""
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="üì± Android", callback_data="instructions_android"),
        InlineKeyboardButton(text="üì± IOS", callback_data="instructions_ios"),
        InlineKeyboardButton(text="üíª Windows", callback_data="instructions_windows"),
        InlineKeyboardButton(text="üíª MacOS", callback_data="instructions_macos"),
    ]
    
    builder.row(*buttons[:2])
    builder.row(*buttons[2:4])
    return builder.as_markup()

def get_unknown_command_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="üìû –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="help_support"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="lk_back_to_start"),
    ]
    
    builder.row(*buttons[:2])
    return builder.as_markup()

def get_back_raffle_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥"""
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="üí≥ –¢–∞—Ä–∏—Ñ—ã", callback_data="start_tariffs"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="lk_back_to_start"),
    ]
    
    builder.row(*buttons[:2])
    return builder.as_markup()


async def get_allocation_tickets_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥ —É—Å–ª–æ–≤–∏–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    builder = InlineKeyboardBuilder()
    base_buttons = [

        InlineKeyboardButton(text="üí≥ –¢–∞—Ä–∏—Ñ—ã", callback_data="start_tariffs"),
    ]
    try:
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            cursor = await conn.execute("""
                SELECT name 
                FROM raffles 
                WHERE status = 'active' 
                AND (end_date IS NULL OR end_date > datetime('now'))
                LIMIT 1
            """)
            active_raffle = await cursor.fetchone()
            
            if active_raffle:
                base_buttons.append(
                    InlineKeyboardButton(
                        text=f"üéâ {active_raffle['name']} üéâ", 
                        callback_data="start_raffle"
                    )
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {e}")

    for i in range(0, len(base_buttons), 2):
        row_buttons = base_buttons[i:i+2]
        builder.row(*row_buttons)
    
    
    return builder.as_markup()

def get_user_balance_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–∞–ª–∞–Ω—Å–∞"""
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="start_add_balance"),
        InlineKeyboardButton(text="üí≥ –¢–∞—Ä–∏—Ñ—ã", callback_data="start_tariffs"),
        InlineKeyboardButton(text="üí∏ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–∞–ª–∞–Ω—Å–æ–º", callback_data="start_transfer_balance"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="start_lk"),
    ]
    
    builder.row(buttons[0], buttons[1])
    builder.row(buttons[2])
    builder.row(buttons[3])
    return builder.as_markup()

def get_user_edit_balance_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–∞–ª–∞–Ω—Å–∞"""
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="üí≤ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="lk_my_balance"),
        InlineKeyboardButton(text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="start_add_balance"),
        InlineKeyboardButton(text="üí≥ –¢–∞—Ä–∏—Ñ—ã", callback_data="start_tariffs"),
    ]
    
    builder.row(buttons[0], buttons[1])
    builder.row(buttons[2])
    return builder.as_markup()

def get_user_success_transfer_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–∞–ª–∞–Ω—Å–∞"""
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="üí≤ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="lk_my_balance"),
        InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="start_tariffs"),
        InlineKeyboardButton(text="üë§ –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="start_lk"),
    ]
    
    builder.row(buttons[0])
    builder.row(buttons[1])
    builder.row(buttons[2])
    return builder.as_markup()

def get_user_cancel_transfer_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥–∞ –±–∞–ª–∞–Ω—Å–∞"""
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="lk_my_balance"),
    ]
    builder.row(buttons[0])
    return builder.as_markup()

def get_back_to_start_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="lk_back_to_start"),
    ]
    
    builder.row(*buttons[:1])
    return builder.as_markup()