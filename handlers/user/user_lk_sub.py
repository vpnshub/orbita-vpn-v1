from aiogram import Router, F
from aiogram.types import CallbackQuery
from loguru import logger
import aiosqlite
from datetime import datetime
from handlers.database import db
from handlers.user.user_kb import get_trial_vless_keyboard, get_subscriptions_keyboard, get_continue_merge_keyboard, get_no_subscriptions_keyboard

router = Router()

@router.callback_query(F.data == "lk_my_subscriptions")
async def show_user_subscriptions(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await callback.message.delete()
        
        async with aiosqlite.connect(db.db_path) as conn:
            async with conn.execute("SELECT datetime('now', 'localtime') as current_time") as cursor:
                current_time = await cursor.fetchone()
                logger.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time[0]}")

            conn.row_factory = aiosqlite.Row
            async with conn.execute("""
                SELECT us.*, s.name as server_name
                FROM user_subscription us
                JOIN server_settings s ON us.server_id = s.id
                WHERE us.user_id = ? AND us.is_active = 1
            """, (callback.from_user.id,)) as cursor:
                all_subs = await cursor.fetchall()
                for sub in all_subs:
                    logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ ID: {sub['id']}, end_date: {sub['end_date']}, is_active: {sub['is_active']}")

            deactivation_query = """
                UPDATE user_subscription 
                SET is_active = 0 
                WHERE user_id = ? 
                AND is_active = 1 
                AND datetime(end_date) < datetime('now', 'localtime')
            """
            logger.info(f"–í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {deactivation_query}")
            await conn.execute(deactivation_query, (callback.from_user.id,))
            await conn.commit()

            async with conn.execute("""
                SELECT 
                    us.*,
                    s.name as server_name,
                    datetime('now', 'localtime') as current_time,
                    datetime(us.end_date) as formatted_end_date,
                    CASE 
                        WHEN datetime(us.end_date) < datetime('now', 'localtime') THEN 0
                        ELSE CAST(
                            (julianday(us.end_date) - julianday('now', 'localtime')) * 24 
                            AS INTEGER
                        )
                    END as hours_left
                FROM user_subscription us
                JOIN server_settings s ON us.server_id = s.id
                WHERE us.user_id = ? AND us.is_active = 1
                ORDER BY us.end_date DESC
            """, (callback.from_user.id,)) as cursor:
                subscriptions = await cursor.fetchall()
                for sub in subscriptions:
                    logger.info(
                        f"–ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –ü–æ–¥–ø–∏—Å–∫–∞ ID: {sub['id']}, "
                        f"end_date: {sub['end_date']}, "
                        f"formatted_end_date: {sub['formatted_end_date']}, "
                        f"current_time: {sub['current_time']}, "
                        f"hours_left: {sub['hours_left']}, "
                        f"is_active: {sub['is_active']}"
                    )

        if not subscriptions:
            await callback.message.answer(
                "üéâ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫? –ù–µ –ø—Ä–æ–±–ª–µ–º–∞!\n\n"
                "üîí –ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É: —à–∏—Ñ—Ä—É–π—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –æ–±—Ö–æ–¥–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø–æ–ª–Ω–æ–π —Å–≤–æ–±–æ–¥–æ–π –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.\n\n"
                "üí° –û—Ñ–æ—Ä–º–∏ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –≤ —Ä–∞–∑–¥–µ–ª–µ –¢–∞—Ä–∏—Ñ—ã, –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏—Ä—É –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü! üåç‚ú®",
                reply_markup=get_no_subscriptions_keyboard()
            )
            return

        message_text = "üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n"
        
        for sub in subscriptions:
            hours = sub['hours_left']
            days = hours // 24
            remaining_hours = hours % 24
            minutes = int((hours % 1) * 60)

            time_parts = []
            if days > 0:
                time_parts.append(f"{days} –¥–Ω.")
            if remaining_hours > 0 or (days == 0 and minutes == 0):
                time_parts.append(f"{remaining_hours} —á.")
            if minutes > 0:
                time_parts.append(f"{minutes} –º–∏–Ω.")
            time_str = " ".join(time_parts)

            end_date = sub['end_date'].split('.')[0]

            message_text += (
                f"\n<blockquote>"
                f"<b>–°–µ—Ä–≤–µ—Ä:</b> {sub['server_name']}\n"
                f"<b>–î–µ–π—Å—Ç–≤—É–µ—Ç:</b> {time_str}\n"
                f"<b>–î–æ:</b> {end_date}\n"
                f"<b>–ö–ª—é—á:</b> <code>{sub['vless']}</code>\n"
                f"</blockquote>\n"
            )

        await callback.message.answer(
            text=message_text,
            reply_markup=get_subscriptions_keyboard(),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_trial_vless_keyboard()
        )

@router.callback_query(F.data == "merge_subscriptions")
async def merge_subscriptions(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫"""
    try:
        await callback.message.delete()
        
        message_text = (
            "üîó <b>–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫:</b>\n"
            "<blockquote>"
            "‚ú® –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç? \n"
            "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –±—É–¥—É—Ç –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ Base64 üîê –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤ –æ–¥–∏–Ω —É–¥–æ–±–Ω—ã–π –∫–ª—é—á. –≠—Ç–æ—Ç –∫–ª—é—á –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö:\n"
        
            "1Ô∏è‚É£ Happ\n"
            "2Ô∏è‚É£ V2raytun\n"
            "3Ô∏è‚É£ Hiddify\n\n"
            "</blockquote>"
            "üåü –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ, —É–¥–æ–±–Ω–æ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –≤–∞—à–∏–º –ø–æ–¥–ø–∏—Å–∫–∞–º!"
        )
        
        await callback.message.answer(
            text=message_text,
            reply_markup=get_continue_merge_keyboard(),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_subscriptions_keyboard()
        ) 