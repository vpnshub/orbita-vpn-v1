from aiogram import Router, F
import aiosqlite
from aiogram.types import CallbackQuery
from handlers.database import Database
from handlers.user.user_kb import get_back_to_start_keyboard
from loguru import logger

router = Router()

@router.callback_query(F.data == "referral_program")
async def show_referral_program(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
    try:
        await callback.message.delete()
        
        db = Database()
        
        conditions = await db.get_referral_conditions()
        
        if not conditions:
            await callback.message.answer(
                "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_back_to_start_keyboard()
            )
            return
        
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute("""
                SELECT username, referral_code, referral_count 
                FROM user 
                WHERE telegram_id = ?
            """, (callback.from_user.id,)) as cursor:
                user_info = await cursor.fetchone()
            
            if not user_info:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                await callback.message.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_back_to_start_keyboard()
                )
                return
                
        conditions_text = ""
        for condition in conditions:
            conditions_text += (
                f"\n<blockquote>\n"
                f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {condition['name']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {condition['description']}\n"
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: {condition['invitations']}\n"
                f"–°—É–º–º–∞ –±–æ–Ω—É—Å–∞: {condition['reward_sum']} —Ä—É–±.\n"
                f"</blockquote>"
            )
        
        bot_info = await callback.bot.get_me()
        ref_link = f"https://t.me/{bot_info.username}?start={user_info['referral_code']}"
        
        await callback.message.answer(
            "üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n"
            "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å!\n\n"
            f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>{ref_link}</code>\n\n"
            f"üìä –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: {user_info['referral_count']} —á–µ–ª–æ–≤–µ–∫.\n\n"
            f"–£—Å–ª–æ–≤–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤:{conditions_text}",
            parse_mode="HTML",
            reply_markup=get_back_to_start_keyboard(),
            disable_web_page_preview=True
        )
        
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_start_keyboard()
        ) 