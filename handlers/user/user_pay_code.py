from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from handlers.database import db
from datetime import datetime, timedelta
from loguru import logger
from aiogram.utils.keyboard import InlineKeyboardBuilder
from handlers.buy_subscribe import subscription_manager

router = Router()

class PaymentCodeState(StatesGroup):
    waiting_for_code = State()

def get_confirm_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å", callback_data="confirm_payment_code")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment_code")
    keyboard.adjust(2)
    return keyboard.as_markup()

def get_back_to_lk_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –õ–ö"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="start_lk")
    return keyboard.as_markup()

@router.callback_query(F.data.startswith("apply_payments_code:"))
async def start_payment_code(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã –∫–æ–¥–æ–º"""
    try:
        tariff_id = int(callback.data.split(':')[1])
        
        tariff = await db.get_tariff(tariff_id)
        if not tariff:
            await callback.answer("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        await state.update_data(tariff_id=tariff_id)
        
        await callback.message.delete()
        await callback.message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –∫–æ–¥–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ <b>{tariff['name']}</b>",
            parse_mode="HTML"
        )
        await state.set_state(PaymentCodeState.waiting_for_code)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ–ø–ª–∞—Ç—ã –∫–æ–¥–æ–º: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(PaymentCodeState.waiting_for_code)
async def process_payment_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –æ–ø–ª–∞—Ç—ã"""
    try:
        payment_code = await db.get_payment_code(message.text)
        
        if not payment_code:
            await message.answer(
                "‚ùå –ö–æ–¥ –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω",
                reply_markup=get_back_to_lk_keyboard()
            )
            await state.clear()
            return
        
        data = await state.get_data()
        tariff_id = data['tariff_id']
        tariff = await db.get_tariff(tariff_id)
        
        if not tariff:
            await message.answer("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return

        if payment_code['sum'] < tariff['price']:
            await message.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞\n\n"
                f"–°—É–º–º–∞ –∫–æ–¥–∞: {payment_code['sum']} ‚ÇΩ\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞: {tariff['price']} ‚ÇΩ",
                reply_markup=get_back_to_lk_keyboard()
            )
            await state.clear()
            return
        
        await state.update_data(payment_code=payment_code)
        
        message_text = (
        f"üí≥ –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ–¥ –æ–ø–ª–∞—Ç—ã: <b>{payment_code['pay_code']}</b>\n"
        f"üí∞ –ù–∞ —Å—É–º–º—É: <b>{payment_code['sum']} ‚ÇΩ</b>\n"
        f"üìã –î–ª—è –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞: <b>{tariff['name']}</b>\n"
        f"üè∑Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞: <b>{tariff['price']} ‚ÇΩ</b>\n\n"
        f"‚ö†Ô∏è –ö–æ–¥ –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç <b>–ø–æ–≥–∞—à–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é</b> –∏ <b>–Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é</b>!"
        )

        
        await message.answer(
            message_text,
            parse_mode="HTML",
            reply_markup=get_confirm_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞ –æ–ø–ª–∞—Ç—ã: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞")
        await state.clear()

@router.callback_query(F.data == "confirm_payment_code")
async def confirm_payment(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∫–æ–¥–æ–º"""
    try:
        data = await state.get_data()
        payment_code = data['payment_code']
        tariff_id = data['tariff_id']
        
        tariff = await db.get_tariff(tariff_id)
        if not tariff:
            await callback.answer("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            await state.clear()
            return
        
        if not await db.disable_payment_code(payment_code['pay_code']):
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞", show_alert=True)
            await state.clear()
            return
        
        subscription = await subscription_manager.create_subscription(
            user_id=callback.from_user.id,
            tariff_id=tariff_id,
            bot=callback.bot
        )
        
        if subscription:
            message_text = (
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                f"<blockquote>"
                f"<b>–¢–∞—Ä–∏—Ñ:</b> {tariff['name']}\n"
                f"<b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {subscription['end_date'].strftime('%d.%m.%Y')}\n"
                f"</blockquote>"
                "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Å—ã–ª–∫—É:\n\n"
                "<blockquote>"
                f"<code>{subscription['vless']}</code>\n"
                "</blockquote>\n"
                "‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É, –æ–Ω–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n"
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –í—ã –Ω–∞–π–¥–µ—Ç–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ."
            )
            
            await callback.message.edit_text(
                text=message_text,
                parse_mode="HTML"
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
            await db.enable_payment_code(payment_code['pay_code'])
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await state.clear()

@router.callback_query(F.data == "cancel_payment_code")
async def cancel_payment(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã –∫–æ–¥–æ–º"""
    await callback.message.edit_text(
        "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_back_to_lk_keyboard()
    )
    await state.clear() 