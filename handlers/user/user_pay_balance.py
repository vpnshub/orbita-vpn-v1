from aiogram import Router, F
from aiogram.types import CallbackQuery
from handlers.database import Database
from handlers.buy_subscribe import subscription_manager
from loguru import logger
from handlers.user.user_kb import get_start_keyboard, get_user_balance_keyboard
import aiosqlite
from datetime import datetime

router = Router()

@router.callback_query(F.data.startswith("apply_balance:"))
async def process_balance_payment(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —Å –±–∞–ª–∞–Ω—Å–∞"""
    try:
        tariff_id = int(callback.data.split(":")[1])
        db = Database()
        
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–ø–ª–∞—Ç—ã —Å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}, —Ç–∞—Ä–∏—Ñ {tariff_id}")
        
        tariff = await db.get_tariff(tariff_id)
        if not tariff:
            logger.warning(f"–¢–∞—Ä–∏—Ñ {tariff_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
            await callback.answer("–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
            
        current_balance = await db.get_user_balance(callback.from_user.id)
        logger.info(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {current_balance} —Ä—É–±.")
        
        if not await db.check_balance_sufficient(callback.from_user.id, float(tariff['price'])):
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}. "
                         f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {tariff['price']}, –±–∞–ª–∞–Ω—Å: {current_balance}")
            await callback.message.edit_text(
                f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.</b>\n\n"
                f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: <b>{tariff['price']} —Ä—É–±.</b>\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{current_balance:.2f} —Ä—É–±.</b>\n\n"
                f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
                reply_markup=get_user_balance_keyboard(),
                parse_mode="HTML"
            )
            return
            
        payment_success = await db.update_balance(
            user_id=callback.from_user.id,
            amount=-float(tariff['price']),
            type='subscription_payment',
            description=f"–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff['name']}"
        )
        
        if payment_success:
            logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ {tariff['price']} —Ä—É–±. —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
            
            subscription_created = await subscription_manager.create_subscription(
                user_id=callback.from_user.id,
                tariff_id=tariff_id,
                payment_id=None
            )
            
            if subscription_created:
                logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
                
                protocol_key = 'vless' if 'vless' in subscription_created else 'ss'
                
                await callback.message.edit_text(
                    "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                    f"<b>–¢–∞—Ä–∏—Ñ:</b> {tariff['name']}\n"
                    f"<b>–°—É–º–º–∞:</b> {tariff['price']} —Ä—É–±.\n"
                    f"<b>–°–ø–∏—Å–∞–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞:</b> {tariff['price']} —Ä—É–±.\n"
                    f"<b>–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ:</b> {(current_balance - float(tariff['price'])):.2f} —Ä—É–±.\n\n"
                    "üéâ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                    "üîê <b>–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n"
                    f"<code>{subscription_created[protocol_key]}</code>\n\n",
                    parse_mode="HTML",
                    reply_markup=await get_start_keyboard(),
                    disable_web_page_preview=True
                )
                
                async with aiosqlite.connect(db.db_path) as conn:
                    async with conn.execute(
                        'SELECT pay_notify FROM bot_settings LIMIT 1'
                    ) as cursor:
                        notify_settings = await cursor.fetchone()

                    if notify_settings and notify_settings[0] != 0:
                        message_text = (
                            "üéâ –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞! üèÜ\n"
                            "<blockquote>"
                            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.id}\n"
                            f"üí≥ –¢–∞—Ä–∏—Ñ: {tariff['name']}\n"
                            f"üí∞ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –û–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞\n"
                            f"üìÖ –î–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                            "üöÄ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</blockquote>"
                        )

                        try:
                            await callback.bot.send_message(
                                chat_id=notify_settings[0],
                                text=message_text,
                                parse_mode="HTML"
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
            else:
                refund_success = await db.update_balance(
                    user_id=callback.from_user.id,
                    amount=float(tariff['price']),
                    type='refund',
                    description=f"–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ —Ç–∞—Ä–∏—Ñ {tariff['name']} (–æ—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏)"
                )
                
                logger.info(f"–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}: {'—É—Å–ø–µ—à–Ω–æ' if refund_success else '–æ—à–∏–±–∫–∞'}")
                
                await callback.message.edit_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.\n"
                    "–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    reply_markup=await get_start_keyboard()
                )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=await get_start_keyboard()
        ) 