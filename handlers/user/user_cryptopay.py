from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger
import json
from datetime import datetime, timedelta
import aiosqlite

from handlers.database import db
from handlers.crypto_pay import crypto_pay_manager
from handlers.buy_subscribe import subscription_manager
from handlers.user.user_kb import get_lk_keyboard
router = Router()

@router.callback_query(F.data.startswith("apply_crypto_payments:"))
async def process_crypto_payment(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π"""
    try:
        tariff_id = int(callback.data.split(':')[1])
        
        crypto_settings = await db.get_crypto_settings()
        if not crypto_settings or not crypto_settings['is_enable']:
            await callback.answer("–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return

        async with aiosqlite.connect(db.db_path) as db_conn:
            db_conn.row_factory = aiosqlite.Row
            async with db_conn.execute('SELECT * FROM tariff WHERE id = ?', (tariff_id,)) as cursor:
                tariff = await cursor.fetchone()

        if not tariff:
            await callback.answer("–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        supported_assets = json.loads(crypto_settings['supported_assets'])
        if not supported_assets:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã", show_alert=True)
            return

        asset = supported_assets[0]

        description = f"–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff['name']} –Ω–∞ {tariff['left_day']} –¥–Ω–µ–π"
        invoice = await crypto_pay_manager.create_payment(
            amount=float(tariff['price']),
            description=description
        )

        if not invoice:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞", show_alert=True)
            return

        payment_data = {
            'user_id': callback.from_user.id,
            'tariff_id': tariff_id,
            'invoice_id': invoice['invoice_id'],
            'amount': float(tariff['price']),
            'asset': asset,
            'status': 'pending'
        }
        
        async with aiosqlite.connect(db.db_path) as db_conn:
            await db_conn.execute("""
                INSERT INTO crypto_payments 
                (user_id, tariff_id, invoice_id, amount, asset, status, created_at)
                VALUES (?, ?, ?, ?, ?, ?, datetime('now'))
            """, (
                payment_data['user_id'],
                payment_data['tariff_id'],
                payment_data['invoice_id'],
                payment_data['amount'],
                payment_data['asset'],
                payment_data['status']
            ))
            await db_conn.commit()

        logger.debug(f"Invoice data: {invoice}")
        message_text = (
            f"üí∞ <b>–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff['name']}</b>\n\n"
            f"üíµ –°—É–º–º–∞: {tariff['price']} RUB\n"
            f"‚è± –°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 60 –º–∏–Ω—É—Ç\n\n"
            f"üîó <a href='{invoice['pay_url']}'>–û–ø–ª–∞—Ç–∏—Ç—å</a>\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏"
        )

        keyboard = InlineKeyboardBuilder()
        keyboard.button(
            text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
            callback_data=f"check_crypto_payment:{invoice['invoice_id']}"
        )
        keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")
        keyboard.adjust(1)

        await callback.message.edit_text(
            text=message_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞",
            show_alert=True
        )

@router.callback_query(F.data.startswith("check_crypto_payment:"))
async def check_crypto_payment(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞"""
    try:
        invoice_id = callback.data.split(':')[1]
        
        async with aiosqlite.connect(db.db_path) as db_conn:
            db_conn.row_factory = aiosqlite.Row
            async with db_conn.execute('SELECT * FROM crypto_payments WHERE invoice_id = ?', (invoice_id,)) as cursor:
                payment = await cursor.fetchone()

        if not payment:
            await callback.answer("–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        invoices = await crypto_pay_manager.api.get_invoices(
            invoice_ids=[invoice_id]
        )
        
        if not invoices or len(invoices) == 0:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ", show_alert=True)
            return

        invoice = invoices[0]
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {invoice_id}: {invoice.get('status', 'unknown')}")
        
        if invoice.get('status') == 'paid':
            async with aiosqlite.connect(db.db_path) as db_conn:
                await db_conn.execute(
                    'UPDATE crypto_payments SET status = ? WHERE invoice_id = ?',
                    ('paid', invoice_id)
                )
                await db_conn.execute("""
                    INSERT INTO payments (user_id, tariff_id, price, date)
                    VALUES (?, ?, ?, datetime('now'))
                """, (payment['user_id'], payment['tariff_id'], payment['amount']))
                await db_conn.commit()

            subscription = await subscription_manager.create_subscription(
                user_id=payment['user_id'],
                tariff_id=payment['tariff_id'],
                is_trial=False
            )

            if not subscription:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                await callback.message.edit_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    reply_markup=None
                )
                return

            async with aiosqlite.connect(db.db_path) as db_conn:
                db_conn.row_factory = aiosqlite.Row
                async with db_conn.execute('SELECT * FROM tariff WHERE id = ?', (payment['tariff_id'],)) as cursor:
                    tariff = await cursor.fetchone()

            message_text = (
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                f"<blockquote>"
                f"<b>–¢–∞—Ä–∏—Ñ:</b> {tariff['name']}\n"
                f"<b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {subscription['end_date'].strftime('%d.%m.%Y')}\n"
                f"</blockquote>"
                "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Å—ã–ª–∫—É:\n\n"
                "<blockquote>"
                f"<code>{subscription['vless']}</code>\n"
                "</blockquote>\n"
                "‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É, –æ–Ω–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n"
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –í—ã –Ω–∞–π–¥–µ—Ç–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ."
            )

            await callback.message.edit_text(
                text=message_text,
                parse_mode="HTML",
                reply_markup=get_lk_keyboard()
            )
        else:
            await callback.answer(
                f"–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞. –°—Ç–∞—Ç—É—Å: {invoice.get('status', '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ')}",
                show_alert=True
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç–µ–∂–∞: {e}")
        logger.debug(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")
        await callback.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞",
            show_alert=True
        )

@router.callback_query(F.data == "cancel_payment")
async def cancel_payment(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        await callback.message.edit_text(
            "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=None
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True) 