from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from handlers.database import Database
from handlers.user.user_kb import get_user_balance_keyboard
from datetime import datetime
from handlers.yookassa import yookassa_manager
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger
from aiogram.filters import StateFilter
import aiosqlite

class BalanceState(StatesGroup):
    waiting_for_amount = State()

router = Router()

@router.callback_query(F.data == "lk_my_balance")
async def show_user_balance(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        db = Database()
        logger.info(f"–ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
        current_balance = await db.get_user_balance(callback.from_user.id)
        logger.info(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {current_balance:.2f} —Ä—É–±.")
        
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            query = """
                SELECT amount, type, description, created_at
                FROM balance_transactions
                WHERE user_id = ?
                ORDER BY created_at DESC
                LIMIT 5
            """
            
            async with conn.execute(query, (callback.from_user.id,)) as cursor:
                transactions = await cursor.fetchall()
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(transactions)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
            
            message_text = (
                f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {current_balance:.2f} —Ä—É–±.\n\n"
                "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n"
            )
            
            if transactions:
                for tx in transactions:
                    operation_type = "‚ûï" if tx['type'] == 'deposit' else \
                                   "‚ûñ" if tx['type'] == 'subscription_payment' else \
                                   "‚ôªÔ∏è" if tx['type'] == 'refund' else "‚ùì"
                    
                    date = datetime.fromisoformat(tx['created_at']).strftime('%d.%m.%Y %H:%M')
                    
                    message_text += (
                        f"<blockquote>"
                        f"{operation_type} {abs(tx['amount']):.2f} —Ä—É–±. - "
                        f"{tx['description']}\n"
                        f"<code>{date}</code>\n"
                        f"</blockquote>\n"
                    )
                    
                logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
            else:
                message_text += "\n–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞"
                logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id} –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            
            can_edit = (
                hasattr(callback.message, 'text') and 
                callback.message.text is not None
            )
            
            if can_edit:
                try:
                    await callback.message.edit_text(
                        message_text,
                        parse_mode="HTML",
                        reply_markup=get_user_balance_keyboard()
                    )
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
                except Exception as edit_error:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_error}")
                    can_edit = False
            
            if not can_edit:
                await callback.message.answer(
                    message_text,
                    parse_mode="HTML",
                    reply_markup=get_user_balance_keyboard()
                )
                try:
                    await callback.message.delete()
                except Exception as del_error:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {del_error}")
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        try:
            await callback.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_user_balance_keyboard()
            )
        except Exception as answer_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {answer_error}")

def get_balance_amount_keyboard() -> InlineKeyboardBuilder:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    keyboard = InlineKeyboardBuilder()
    
    amounts = ["100", "250", "500", "1000"]
    for amount in amounts:
        keyboard.button(
            text=f"{amount} —Ä—É–±.", 
            callback_data=f"add_balance_{amount}"
        )
    
    keyboard.button(
        text="–î—Ä—É–≥–∞—è —Å—É–º–º–∞",
        callback_data="add_balance_custom"
    )
    
    keyboard.button(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="lk_my_balance"
    )
    
    keyboard.adjust(2)
    return keyboard.as_markup()

@router.callback_query(F.data == "start_add_balance")
async def start_add_balance(callback: CallbackQuery):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    await callback.message.edit_text(
        "üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n"
        "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É <b>–ÆKassa</b>.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞. üí∞‚úÖ",
        parse_mode="HTML",
        reply_markup=get_balance_amount_keyboard()
    )

@router.callback_query(F.data.startswith("add_balance_"))
async def process_balance_amount(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    amount_str = callback.data.replace("add_balance_", "")
    
    if amount_str == "custom":
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω–∏–º—É–º 10 —Ä—É–±–ª–µ–π):",
            reply_markup=get_user_balance_keyboard()
        )
        await state.set_state(BalanceState.waiting_for_amount)
        return

    await create_payment(callback, float(amount_str))

@router.message(StateFilter(BalanceState.waiting_for_amount), flags={"long_operation": "typing"})
async def process_custom_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—É–º–º—ã"""
    try:
        amount = float(message.text)
        if amount < 10:
            await message.answer(
                "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 10 —Ä—É–±–ª–µ–π",
                reply_markup=get_balance_amount_keyboard()
            )
            return
        
        await state.clear()
        await create_payment(message, amount)
        
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É",
            reply_markup=get_balance_amount_keyboard()
        )

async def create_payment(event, amount: float):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa"""
    description = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{event.from_user.username or event.from_user.id}"
    
    payment_id, payment_url = await yookassa_manager.create_payment(
        amount=amount,
        description=description,
        user_id=str(event.from_user.id),
        username=event.from_user.username
    )
    
    if payment_id and payment_url:
        db = Database()
        await db.update_balance(
            user_id=event.from_user.id,
            amount=0,
            type='pending',
            description=f"–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ —Å—É–º–º—É {amount} —Ä—É–±.",
            payment_id=payment_id
        )
        
        message_text = (
            "‚úÖ –°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω!\n\n"
            f"–°—É–º–º–∞: {amount} —Ä—É–±.\n"
            "–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ üëá"
        )
        
        if isinstance(event, CallbackQuery):
            await event.message.edit_text(
                message_text,
                reply_markup=InlineKeyboardBuilder()
                .button(text="üí∞ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)
                .button(text="üïµÔ∏è‚Äç‚ôÇÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_balance_payment:{payment_id}")
                .button(text="üîô –ù–∞–∑–∞–¥", callback_data="lk_my_balance")
                .adjust(1)
                .as_markup()
            )
        else:
            await event.answer(
                message_text,
                reply_markup=InlineKeyboardBuilder()
                .button(text="üí∞ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)
                .button(text="üïµÔ∏è‚Äç‚ôÇÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_balance_payment:{payment_id}")
                .button(text="üîô –ù–∞–∑–∞–¥", callback_data="lk_my_balance")
                .adjust(1)
                .as_markup()
            )
    else:
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if isinstance(event, CallbackQuery):
            await event.message.edit_text(
                error_text,
                reply_markup=get_user_balance_keyboard()
            )
        else:
            await event.answer(
                error_text,
                reply_markup=get_user_balance_keyboard()
            )

@router.callback_query(F.data.startswith("check_balance_payment:"))
async def check_payment_status(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        payment_id = callback.data.split(":")[1]
        
        if await yookassa_manager.check_payment(payment_id, callback.bot):
            await show_user_balance(callback)
            return
            
        await callback.message.edit_text(
            "‚ùå –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞.\n\n"
            "–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üïµÔ∏è‚Äç‚ôÇÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_balance_payment:{payment_id}")
            .button(text="üîô –ù–∞–∑–∞–¥", callback_data="lk_my_balance")
            .adjust(1)
            .as_markup()
        )
        await callback.answer("–ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_user_balance_keyboard()
        )

async def process_successful_balance_payment(payment_id: str, amount: float, user_id: int, bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    db = Database()
    
    if await db.update_balance(
        user_id=user_id,
        amount=amount,
        type='deposit',
        description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—É–º–º—É {amount} —Ä—É–±.",
        payment_id=payment_id
    ):
        try:
            await bot.send_message(
                chat_id=user_id,
                text=(
                    "‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!\n\n"
                    f"–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount} —Ä—É–±.\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! üôè"
                ),
                reply_markup=get_user_balance_keyboard()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}") 