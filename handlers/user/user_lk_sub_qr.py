from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile, BufferedInputFile
from loguru import logger
import aiosqlite
from datetime import datetime
import qrcode
import io
from handlers.database import db
from handlers.user.user_kb import get_trial_vless_keyboard, get_subscriptions_keyboard, get_continue_merge_keyboard, get_no_subscriptions_keyboard

router = Router()

@router.callback_query(F.data == "lk_my_subscriptions")
async def show_user_subscriptions(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await callback.message.delete()
        
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute("""
                SELECT us.*, s.name as server_name
                FROM user_subscription us
                JOIN server_settings s ON us.server_id = s.id
                WHERE us.user_id = ? AND us.is_active = 1
                ORDER BY us.end_date DESC
            """, (callback.from_user.id,)) as cursor:
                subscriptions = await cursor.fetchall()

        if not subscriptions:
            await callback.message.answer(
            "üéâ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫? –ù–µ –ø—Ä–æ–±–ª–µ–º–∞!\n\n"
            "üîí –ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É: —à–∏—Ñ—Ä—É–π—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –æ–±—Ö–æ–¥–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø–æ–ª–Ω–æ–π —Å–≤–æ–±–æ–¥–æ–π –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.\n\n"
            "üí° –û—Ñ–æ—Ä–º–∏ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –≤ —Ä–∞–∑–¥–µ–ª–µ –¢–∞—Ä–∏—Ñ—ã, –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏—Ä—É –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü! üåç‚ú®",
         reply_markup=get_no_subscriptions_keyboard()
        )
            return

        message_text = "üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n"
        
        for idx, sub in enumerate(subscriptions, 1):
            try:
                end_date_str = sub['end_date'].split('.')[0]
                end_date = datetime.strptime(end_date_str, '%Y-%m-%d %H:%M:%S')
                time_left = end_date - datetime.now()
                
                days_left = time_left.days
                hours_left = time_left.seconds // 3600
                
                if days_left > 0:
                    time_str = f"{days_left} –¥–Ω. {hours_left} —á."
                else:
                    time_str = f"{hours_left} —á."

                qr = qrcode.QRCode(version=1, box_size=10, border=5)
                qr.add_data(sub['vless'])
                qr.make(fit=True)
                
                img_byte_arr = io.BytesIO()
                qr.make_image(fill_color="black", back_color="white").save(img_byte_arr, format='PNG')
                img_byte_arr.seek(0)
                
                photo = BufferedInputFile(
                    img_byte_arr.getvalue(),
                    filename="qr_code.png"
                )
                
                message_text = (
                    f"<blockquote>"
                    f"<b>–°—Ç—Ä–∞–Ω–∞:</b> {sub['server_name']}\n"
                    f"<b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {time_str}\n"
                    f"<b>–ö–ª—é—á:</b> <code>{sub['vless']}</code>\n"
                    f"</blockquote>\n"
                )
                
                await callback.message.answer_photo(
                    photo=photo,
                    caption=message_text,
                    parse_mode="HTML"
                )

            except Exception as date_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: {date_error}")
                continue

        await callback.message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_subscriptions_keyboard(),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_trial_vless_keyboard()
        )

@router.callback_query(F.data == "merge_subscriptions")
async def merge_subscriptions(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫"""
    try:
        await callback.message.delete()
        
        message_text = (
            "üîó <b>–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫:</b>\n"
            "<blockquote>"
            "‚ú® –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç? \n"
            "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –±—É–¥—É—Ç –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ Base64 üîê –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤ –æ–¥–∏–Ω —É–¥–æ–±–Ω—ã–π –∫–ª—é—á. –≠—Ç–æ—Ç –∫–ª—é—á –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö:\n"
        
            "1Ô∏è‚É£ Happ\n"
            "2Ô∏è‚É£ V2raytun\n"
            "3Ô∏è‚É£ Hiddify\n\n"
            "</blockquote>"
            "üåü –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ, —É–¥–æ–±–Ω–æ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –≤–∞—à–∏–º –ø–æ–¥–ø–∏—Å–∫–∞–º!"
        )
        
        await callback.message.answer(
            text=message_text,
            reply_markup=get_continue_merge_keyboard(),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_subscriptions_keyboard()
        )