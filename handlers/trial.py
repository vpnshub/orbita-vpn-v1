from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from loguru import logger
import os

from handlers.database import db
from handlers.user.user_kb import get_trial_keyboard, get_trial_vless_keyboard, get_no_subscriptions_keyboard
from handlers.commands import start_command
from handlers.x_ui import xui_manager
from handlers.buy_subscribe import subscription_manager

router = Router()

async def get_active_trial_settings():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    async with db.connect() as conn:
        async with conn.execute(
            'SELECT * FROM trial_settings WHERE is_enable = 1 LIMIT 1'
        ) as cursor:
            trial = await cursor.fetchone()
            return dict(trial) if trial else None

@router.callback_query(F.data == "start_trial")
async def process_trial_button(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    try:
        await callback.message.delete()
        
        user = await db.get_user(callback.from_user.id)
        if not user:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {callback.from_user.id}")
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        if user.get('trial_period'):
            text = "–í—ã —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–µ—Ä–≤–∏—Å"
            await callback.message.answer(
                text=text,
                reply_markup=get_trial_keyboard(show_connect=False)
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {callback.from_user.id}")
            return

        trial_settings = await db.get_active_trial_settings()
        if not trial_settings:
            text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å–µ–π—á–∞—Å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            await callback.message.answer(
                text=text,
                reply_markup=get_trial_keyboard(show_connect=False)
            )
            logger.info("–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return

        base_text = (
            "<b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥!</b>\n\n"
            "<blockquote>"
            f"<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {trial_settings.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"<b>–ü—Ä–æ–±–Ω—ã—Ö –¥–Ω–µ–π:</b> {trial_settings.get('left_day', 0)}\n"
            f"<b>–°–µ—Ä–≤–µ—Ä:</b> {trial_settings.get('server_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            "</blockquote>\n"
        )

        message_data = await db.get_bot_message('trial_success')
        
        if message_data and message_data['image_path'] and os.path.exists(message_data['image_path']):
            full_text = base_text + message_data['text']
            await callback.message.answer_photo(
                photo=FSInputFile(message_data['image_path']),
                caption=full_text,
                reply_markup=get_trial_keyboard(show_connect=True),
                parse_mode="HTML"
            )
        else:
            text = base_text + "–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–∞–º—ã–π –ª—É—á—à–∏–π —Å–µ—Ä–≤–∏—Å –≤ –º–∏—Ä–µ? –ñ–º–∏ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å"
            await callback.message.answer(
                text=text,
                reply_markup=get_trial_keyboard(show_connect=True)
            )

        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {callback.from_user.id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "trial_connect")
async def process_trial_connect(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    try:
        user = await db.get_user(callback.from_user.id)
        if not user:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {callback.from_user.id}")
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        if user.get('trial_period'):
            text = "–í—ã —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–µ—Ä–≤–∏—Å"
            await callback.message.answer(
                text=text,
                reply_markup=get_trial_keyboard(show_connect=False)
            )
            return

        trial_settings = await db.get_active_trial_settings()
        if not trial_settings:
            await callback.message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å–µ–π—á–∞—Å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                reply_markup=get_trial_keyboard(show_connect=False)
            )
            return

        server_settings = await db.get_server_settings(trial_settings['server_id'])
        if not server_settings:
            await callback.message.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ä–≤–µ—Ä–∞",
                reply_markup=get_trial_keyboard(show_connect=False)
            )
            return

        subscription = await subscription_manager.create_subscription(
            user_id=callback.from_user.id,
            tariff_id=trial_settings['id'],
            is_trial=True
        )

        if not subscription:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_trial_keyboard(show_connect=False)
            )
            return

        vless_link = subscription['vless']

        await db.update_user_trial_status(callback.from_user.id, True)

        text = (
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {trial_settings['left_day']} –¥–Ω–µ–π\n"
            "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Å—ã–ª–∫—É:\n\n"
            f"`{vless_link}`\n\n"
            "‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É, –æ–Ω–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n"
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏."
        )
        
        await callback.message.answer(
            text=text,
            reply_markup=get_no_subscriptions_keyboard(),
            parse_mode="Markdown"
        )
        logger.info(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {callback.from_user.id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_trial_keyboard(show_connect=False)
        )

@router.callback_query(F.data == "trial_back")
async def process_trial_back(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    try:
        await callback.message.delete()
        await start_command(callback.message)
        logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: {callback.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
